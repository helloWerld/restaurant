{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","cache-control":"private","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Mon, 26 Aug 2024 16:46:23 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "places": [
    {
      "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM",
      "id": "ChIJb_SRfaQv2YgRM0A_8egAZvM",
      "types": [
        "pizza_restaurant",
        "restaurant",
        "point_of_interest",
        "food",
        "establishment"
      ],
      "nationalPhoneNumber": "(561) 770-1966",
      "internationalPhoneNumber": "+1 561-770-1966",
      "formattedAddress": "10610 Forest Hill Blvd, Wellington, FL 33414, USA",
      "addressComponents": [
        {
          "longText": "10610",
          "shortText": "10610",
          "types": [
            "street_number"
          ],
          "languageCode": "en-US"
        },
        {
          "longText": "Forest Hill Boulevard",
          "shortText": "Forest Hill Blvd",
          "types": [
            "route"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Wellington",
          "shortText": "Wellington",
          "types": [
            "locality",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Palm Beach County",
          "shortText": "Palm Beach County",
          "types": [
            "administrative_area_level_2",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Florida",
          "shortText": "FL",
          "types": [
            "administrative_area_level_1",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "United States",
          "shortText": "US",
          "types": [
            "country",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "33414",
          "shortText": "33414",
          "types": [
            "postal_code"
          ],
          "languageCode": "en-US"
        }
      ],
      "plusCode": {
        "globalCode": "76RXJQXP+X3",
        "compoundCode": "JQXP+X3 Wellington, FL, USA"
      },
      "location": {
        "latitude": 26.6498955,
        "longitude": -80.2148167
      },
      "viewport": {
        "low": {
          "latitude": 26.6485915697085,
          "longitude": -80.2160969302915
        },
        "high": {
          "latitude": 26.651289530291503,
          "longitude": -80.213398969708493
        }
      },
      "rating": 4.5,
      "googleMapsUri": "https://maps.google.com/?cid=17538706799320842291",
      "websiteUri": "http://www.sicilianoven.com/",
      "regularOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 12,
              "minute": 0
            },
            "close": {
              "day": 0,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 1,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 2,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 3,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 4,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 30
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:30 AM – 10:00 PM",
          "Tuesday: 11:30 AM – 10:00 PM",
          "Wednesday: 11:30 AM – 10:00 PM",
          "Thursday: 11:30 AM – 10:00 PM",
          "Friday: 11:30 AM – 10:00 PM",
          "Saturday: 11:30 AM – 10:00 PM",
          "Sunday: 12:00 – 10:00 PM"
        ]
      },
      "utcOffsetMinutes": -240,
      "adrFormatAddress": "\u003cspan class=\"street-address\"\u003e10610 Forest Hill Blvd\u003c/span\u003e, \u003cspan class=\"locality\"\u003eWellington\u003c/span\u003e, \u003cspan class=\"region\"\u003eFL\u003c/span\u003e \u003cspan class=\"postal-code\"\u003e33414\u003c/span\u003e, \u003cspan class=\"country-name\"\u003eUSA\u003c/span\u003e",
      "businessStatus": "OPERATIONAL",
      "priceLevel": "PRICE_LEVEL_MODERATE",
      "userRatingCount": 402,
      "iconMaskBaseUri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",
      "iconBackgroundColor": "#FF9E67",
      "displayName": {
        "text": "Sicilian Oven",
        "languageCode": "en"
      },
      "primaryTypeDisplayName": {
        "text": "Pizza restaurant",
        "languageCode": "en"
      },
      "takeout": true,
      "delivery": true,
      "dineIn": true,
      "curbsidePickup": true,
      "reservable": false,
      "servesLunch": true,
      "servesDinner": true,
      "servesBeer": true,
      "servesWine": true,
      "servesVegetarianFood": true,
      "currentOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 12,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            },
            "close": {
              "day": 0,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            },
            "close": {
              "day": 1,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            },
            "close": {
              "day": 2,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            },
            "close": {
              "day": 3,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            },
            "close": {
              "day": 4,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:30 AM – 10:00 PM",
          "Tuesday: 11:30 AM – 10:00 PM",
          "Wednesday: 11:30 AM – 10:00 PM",
          "Thursday: 11:30 AM – 10:00 PM",
          "Friday: 11:30 AM – 10:00 PM",
          "Saturday: 11:30 AM – 10:00 PM",
          "Sunday: 12:00 – 10:00 PM"
        ]
      },
      "primaryType": "pizza_restaurant",
      "shortFormattedAddress": "10610 Forest Hill Blvd, Wellington",
      "reviews": [
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSUM3N2ZHWjB3RRAB",
          "relativePublishTimeDescription": "a week ago",
          "rating": 5,
          "text": {
            "text": "We have been to the Wellington location four or five times, tried most things on the menu and have ALWAYS thoroughly enjoyed EVERYTHING! The pizza is excellent (and we’re ex-New Yorkers). The wood fired wings and scilician salad are UNIQUE and DEEEELICIOUS :-p Service is also top-notch and prices really reasonable for the big portions. My husband chose to go Sicilian Oven for his birthday instead of a steakhouse!!! Thanks to Eddie and Lauren (i think) for making his birthday special  :)",
            "languageCode": "en"
          },
          "originalText": {
            "text": "We have been to the Wellington location four or five times, tried most things on the menu and have ALWAYS thoroughly enjoyed EVERYTHING! The pizza is excellent (and we’re ex-New Yorkers). The wood fired wings and scilician salad are UNIQUE and DEEEELICIOUS :-p Service is also top-notch and prices really reasonable for the big portions. My husband chose to go Sicilian Oven for his birthday instead of a steakhouse!!! Thanks to Eddie and Lauren (i think) for making his birthday special  :)",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Shrivani “MochaMama” Simmons",
            "uri": "https://www.google.com/maps/contrib/100066109413066056749/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXnREeQLRMkwfLaVtMxGv-9k1OJ4KKNBbmajdZ7y1GO1dmld6eC=s128-c0x00000000-cc-rp-mo-ba3"
          },
          "publishTime": "2024-08-18T04:51:29Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUNidEtlWFlBEAE",
          "relativePublishTimeDescription": "a month ago",
          "rating": 5,
          "text": {
            "text": "My father lives in Wellington ( Fla) & recently heard about this restaurant opening & wanted to try it. This was a belated birthday celebration, so of course we went- All we can say is from the salad to the rice ball to the wings to the General pizza everything was delicious 😋 Our server Michael?? Phenomenal! He made excellent recommendations, so nice & knowledgeable about the entire menu… Met & talked to the manager- nice gentleman, even gave us a dessert on the house for coming !! Oh they have a Veterans , 1st responders & law enforcement discount 🫶🏼 ( I’m a Veteran)\nThis is a definite go to place- can’t wait to go back !!\nJust opened  A few weeks ago- Think they’re going to do great !",
            "languageCode": "en"
          },
          "originalText": {
            "text": "My father lives in Wellington ( Fla) & recently heard about this restaurant opening & wanted to try it. This was a belated birthday celebration, so of course we went- All we can say is from the salad to the rice ball to the wings to the General pizza everything was delicious 😋 Our server Michael?? Phenomenal! He made excellent recommendations, so nice & knowledgeable about the entire menu… Met & talked to the manager- nice gentleman, even gave us a dessert on the house for coming !! Oh they have a Veterans , 1st responders & law enforcement discount 🫶🏼 ( I’m a Veteran)\nThis is a definite go to place- can’t wait to go back !!\nJust opened  A few weeks ago- Think they’re going to do great !",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "melanie r janowsky",
            "uri": "https://www.google.com/maps/contrib/106878590001703428398/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWa9H3u-NS0f8ehczIXF3rV7-uDD0FTVSaKg0-dkh6_T6Mwey0j=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-07-23T22:18:11Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSURiblBHcHJ3RRAB",
          "relativePublishTimeDescription": "3 weeks ago",
          "rating": 5,
          "text": {
            "text": "My new goto pizza and Italian food restaurant around Wellington/West Palm Beach. The food has been excellent and well prepared. Last trip we had the Captains pizza along with a Sicilian salad and wasn't disappointed. Yery open air atmosphere with several TV's akin to a sports bar. It's a 40 mile trip for us but we don't mind the drive.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "My new goto pizza and Italian food restaurant around Wellington/West Palm Beach. The food has been excellent and well prepared. Last trip we had the Captains pizza along with a Sicilian salad and wasn't disappointed. Yery open air atmosphere with several TV's akin to a sports bar. It's a 40 mile trip for us but we don't mind the drive.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "RICHARD ELLISON",
            "uri": "https://www.google.com/maps/contrib/113437936541932753640/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXfoy26D098LjwEzXpZtLaJz5BOFr-SY1nf_uSIBfKtVc3mxVoluA=s128-c0x00000000-cc-rp-mo-ba4"
          },
          "publishTime": "2024-08-03T00:02:40Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSUNkaG9tbW1RRRAB",
          "relativePublishTimeDescription": "6 months ago",
          "rating": 5,
          "text": {
            "text": "I know that pizza 🍕 should be Italian. Although I read somewhere that it was actually invented in china! 🤭. Please don’t shoot the messenger! But I believe pizza has become the ultimate American 🇺🇸 feel good, so perfect for any occasion meal! Today was my first time in Sicilian Oven and I am so excited that I finally decided to try it!! I was in the mood for some American food 🥰🤭. So for me this was a treat. I love pizza. It reminds me of so many good memories. Anyway!!! To the review I go! 🫡. The service was beyond great (if you get Sharon or Emily, you are so welcome 🤗). The food was delicious! And I absolutely loved the lunch portions.  Just right! Because you can eat lunch and have lunch the next day. Again, you are welcome ❤️. We won’t even get into the drinks! 🥰 You can always thank me again 😘 Today is valentines 💌 day! And I felt the love. I truly hope you #enjoy your meal, the beautiful Florida “winter” weather and the music 🎶 of course!! It makes everything complete.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "I know that pizza 🍕 should be Italian. Although I read somewhere that it was actually invented in china! 🤭. Please don’t shoot the messenger! But I believe pizza has become the ultimate American 🇺🇸 feel good, so perfect for any occasion meal! Today was my first time in Sicilian Oven and I am so excited that I finally decided to try it!! I was in the mood for some American food 🥰🤭. So for me this was a treat. I love pizza. It reminds me of so many good memories. Anyway!!! To the review I go! 🫡. The service was beyond great (if you get Sharon or Emily, you are so welcome 🤗). The food was delicious! And I absolutely loved the lunch portions.  Just right! Because you can eat lunch and have lunch the next day. Again, you are welcome ❤️. We won’t even get into the drinks! 🥰 You can always thank me again 😘 Today is valentines 💌 day! And I felt the love. I truly hope you #enjoy your meal, the beautiful Florida “winter” weather and the music 🎶 of course!! It makes everything complete.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Cynthia De Las Salas",
            "uri": "https://www.google.com/maps/contrib/110104086246134488709/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjU-kGW83B6N1PYG-A4-aom8bPLErqHiLCPC6V9_WxL87UeyegCl=s128-c0x00000000-cc-rp-mo-ba5"
          },
          "publishTime": "2024-02-14T20:25:33Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUM3X015TExBEAE",
          "relativePublishTimeDescription": "a week ago",
          "rating": 5,
          "text": {
            "text": "Had lunch there today for the first time -was expressed delicious food , good portion sizes , plenty to share , excellent service and comfortable atmosphere , reasonable prices , can’t wait to go back and try more dishes",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Had lunch there today for the first time -was expressed delicious food , good portion sizes , plenty to share , excellent service and comfortable atmosphere , reasonable prices , can’t wait to go back and try more dishes",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Craig",
            "uri": "https://www.google.com/maps/contrib/116236636869824040469/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocLMvmFaxbgbrNImtWKY9cwAcs0uhiXCRgZDKDVz62XUBehDBw=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-08-13T19:13:39Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CvXWwlkQ3roimhTx9vbT12lbCmSb_TM4PoyXKJXJXRxa363NYK-YlAMUnRS-vhlvtavGzhBNygVMq-RuDiccgL7ynTYmQubN7hX76A4Y_FT7UUhm3Jbp9Tp-VvyAt1cBwBLgo_HCXaqIqV7z5EwbU9Z_CiTBr6ne2ws",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Alan Abramson",
              "uri": "//maps.google.com/maps/contrib/107698666304740542647",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXHxJs98syD7vgXjUn3UuNdbhEkcoDSmqQ-cLEFs3FQ1O6wtvno=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_Ct0EZT_Zf5xOUrjL-OdoTt1mBM_qtFrqBW_QSVVSNfMyi-2ZxXRvMgvFBYIgntV_cvES17d8uFB8JoQt-ZO-BO3MLl615tbTzSp1FU2JHEGSphzf8-1Lyx98TfsjkPWtm9O5YSnBmSTiBCzhWLNxG9Hab2eEoQyJneS",
          "widthPx": 1284,
          "heightPx": 723,
          "authorAttributions": [
            {
              "displayName": "Sicilian Oven",
              "uri": "//maps.google.com/maps/contrib/102658935275799321459",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXSdgpnSkzgurYkpBsj-GO2XPHc0PiPZh21dMS-ONekG2yFylk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CvAz6JF1eEeW-__cQoITmUs9I-sOnv14igjyiFC8E9kly9itM62Du7sCqDHKtHt89Hvs99nM9IlAKlqzRa_7TSvclj2lsafSyo_3n5va26qoSleBtF5FEDV3Hcx7ezIvkYvV8DweqIzaQybYClQqK5WYFnZgZPOzcjr",
          "widthPx": 4000,
          "heightPx": 2252,
          "authorAttributions": [
            {
              "displayName": "RICHARD ELLISON",
              "uri": "//maps.google.com/maps/contrib/113437936541932753640",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXfoy26D098LjwEzXpZtLaJz5BOFr-SY1nf_uSIBfKtVc3mxVoluA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CuYsRTkT3bscQqZ8HtBICwQRRYZaO7-OxQnim-RQgHmLBTsZVjV3BPipLdYCPcE3TE1PWhHXKRhj42O2KPP0oWAF8Ap_gwspD0NINqEsvvCq4uPT7fxnsqwC0RsoVuVh87jji31gdyXmYq_YPC43dn5t2kxl3IFY0MG",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Alon Fischer",
              "uri": "//maps.google.com/maps/contrib/114296752953606500878",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocIIGPOxfn-y5AC7JEG4YE-2B-oKL4dvF0irY8S-V21nzRGCHw=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CvpGRmzT4quOBPLHJOtTz8eNivktRygYPgr5n8Dxh-z57mV9ml53zvSNCMvw52OpbwFC9gDe5Fq6pbVYCUcEhz80H22itVHBYrujYYnudLC-1HzAYRK5RNLCAXEzYjxwZSYfO5lT2nEeeJZeA8jn1GF5pCmk4agaysU",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CvIG-V58YeoOzQmEK-qKCXm3fxY8pgCwCG8W6idB_9j1ccVOI5L3z6kdtV2vPpzGoB9tBG7anRgEq10KIng7EnUkVZkq7O6Er3rpT-PshpNNyN4wlTyWOUjAT8Snt20uV_k3XZ4I_lKgYWXE5QrP6UCGtnRBr4ciffR",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CszjWR-_5jtgZ0PBVjM4NRVZbejFyT8o8zC6I6NmYtZ_kEdNJGCjespvjLsiWUHAKY2ljJHyPrp2zi6Ar7Tgl9WHfZBtsk3DZMvwVdwxrzSDgChPcRY1HVFuyC7amntaKFy_lhEfiDm-pvtKPjkPSyJ-lkxX041_0mO",
          "widthPx": 1089,
          "heightPx": 1452,
          "authorAttributions": [
            {
              "displayName": "Adriana Ruini",
              "uri": "//maps.google.com/maps/contrib/114960914788633822890",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXqxTGr59dIXdy95QdRjQSUTNVCMRszgXGaScAnYwxBfXqXsps=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CvyCwiaCYwPzR232LS6ycKun4ieqdgk05KXDZQADZZ5KBF53Pu7TqXfMBNDW82qP-8vtZq9ykpZ_x6d4mm4OsI1d9OIS0vZAQZ8-3ROukXO2-KWbGBqXBAje42TU8QdwbG_XAlGPmE4x21Ih6gVCGqDOMe0sMmdnQ5u",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Shawn Roney",
              "uri": "//maps.google.com/maps/contrib/101507582442593145448",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVt0kZDR72C7PgP6jIopVKr34mZ19yKAPQ9ESMruzjeNJgLLA_g=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CubO7IihKA_yz4N1UYw7-0e45WcyzBI_7SvF_1Y6wfAbB6NLBYddfz1bQ0nsQECSpzMH7X4xulgYBL0ceM3HKxc8pYusxN1jtGJayHQM8AXSD5RXBKyL8-q2QsCpkK2QvAaBM2driUKZWep4vJRkS76uDv1ri1Ea6VY",
          "widthPx": 3000,
          "heightPx": 4000,
          "authorAttributions": [
            {
              "displayName": "Monica Arevalo",
              "uri": "//maps.google.com/maps/contrib/116931126138426062438",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocIAv2JOmR3gCIH-7ED4gwh533_93M3dHju-_n6GnknbPBFEtzSI=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CuYWWoRcTvO762t6ealxnAEjyxm4vXNRNzEz3SIdyvkfUZDYaE5o5o0o1w3Ng6Z7YlN60AxRfrz6EEgoZCYhX5mtPl4P_ja9pnfTTdpYX7oLwpap4Zq6h4dctz7eppE3XJWecIypPmmEvWubTwYSZOwvriAbRSo5Cj8",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "outdoorSeating": true,
      "liveMusic": false,
      "menuForChildren": true,
      "servesCocktails": true,
      "servesDessert": true,
      "servesCoffee": true,
      "goodForChildren": true,
      "restroom": true,
      "goodForGroups": true,
      "paymentOptions": {
        "acceptsCreditCards": true,
        "acceptsDebitCards": true,
        "acceptsCashOnly": false,
        "acceptsNfc": false
      },
      "parkingOptions": {
        "freeParkingLot": true,
        "freeStreetParking": true,
        "valetParking": false
      },
      "accessibilityOptions": {
        "wheelchairAccessibleParking": true,
        "wheelchairAccessibleEntrance": true,
        "wheelchairAccessibleRestroom": true,
        "wheelchairAccessibleSeating": true
      },
      "generativeSummary": {
        "overview": {
          "text": "Pizzeria serving wood-fired pies, plus Sicilian specialties and craft cocktails, in casual digs.",
          "languageCode": "en-US"
        },
        "description": {
          "text": "Easygoing pizzeria dishing up wood-fired pies, plus Sicilian specialties and craft cocktails, inside Wellington Green Square.\nThe menu features salads, pasta, wings, and a selection of sauces. Personal pizzas are popular, and guests often order the vodka, eggplant parm, and Sicilian salad.\nThe venue has a cozy, cool atmosphere with a bar, and is good for kids. Happy hour drinks are available. Guests say the staff is amazing.\nCustomers typically spend $20–30.",
          "languageCode": "en-US"
        },
        "references": {
          "reviews": [
            {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUN4bmZxc1BREAE",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "First time. A personal pizza for $10 which included a salad. We will be back.",
                "languageCode": "en"
              },
              "originalText": {
                "text": "First time. A personal pizza for $10 which included a salad. We will be back.",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Carol O",
                "uri": "https://www.google.com/maps/contrib/116697213850473148968/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVndsNn7tA9Ktkmz-_NAgVINXeyLvgKG-_8wBuj4moFpe02JM_oCA=s128-c0x00000000-cc-rp-mo-ba4"
              },
              "publishTime": "2023-05-23T19:44:21Z"
            },
            {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSUNKa0tERmpRRRAB",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "Amazing place ! I will come back !",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Amazing place ! I will come back !",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Johnny Carreras",
                "uri": "https://www.google.com/maps/contrib/105735033463339202084/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocII2tezPlSzV1drsyjI6zugJq50RUPRITA6m_cUwT0EE83l4g=s128-c0x00000000-cc-rp-mo"
              },
              "publishTime": "2023-06-19T00:24:41Z"
            },
            {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSURKMnB2bC1BRRAB",
              "relativePublishTimeDescription": "a year ago",
              "rating": 4,
              "text": {
                "text": "I've had their thin pizza on 3 occasions. Twice for take out and once inside. The take out pizza was mediocre, but eating the pizza inside the establishment was quite good. I also ordered their Sicilian salad which was excellent! The service was good and the atmosphere was really nice. There was a busy lunch crowd on a hot summer's day. Reminds me of some of the places on Atlantic Avenue in Delray. There is also an outside eating area. I am looking forward to trying some of their other dishes. Until I do, I just give them four stars for food.",
                "languageCode": "en"
              },
              "originalText": {
                "text": "I've had their thin pizza on 3 occasions. Twice for take out and once inside. The take out pizza was mediocre, but eating the pizza inside the establishment was quite good. I also ordered their Sicilian salad which was excellent! The service was good and the atmosphere was really nice. There was a busy lunch crowd on a hot summer's day. Reminds me of some of the places on Atlantic Avenue in Delray. There is also an outside eating area. I am looking forward to trying some of their other dishes. Until I do, I just give them four stars for food.",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Howard Petlack",
                "uri": "https://www.google.com/maps/contrib/113136720299362246360/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUYUQJJE-sc_Ym00fnSyskU9zgz4Fl7eOwcqXW9mUVbY8p0yI0=s128-c0x00000000-cc-rp-mo"
              },
              "publishTime": "2023-07-15T10:32:03Z"
            },
            {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUN4MkxxZlRnEAE",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "Amazing that I went for Lunch and Back for Dinner. My Servers were amazing and Nancy was Amazing and knew the menu well",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Amazing that I went for Lunch and Back for Dinner. My Servers were amazing and Nancy was Amazing and knew the menu well",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Maria Caraballo",
                "uri": "https://www.google.com/maps/contrib/104609339253060244713/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVCWk9UkWHnM1YbT9otLpxUBKPwr21QQxWO2cETyCy9-eI-o4YH=s128-c0x00000000-cc-rp-mo"
              },
              "publishTime": "2023-05-10T02:46:57Z"
            },
            {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUNKbzZHa1B3EAE",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "We had a great meal, the service was amazing, the food was delicious and the atmosphere was comfortable and fun. Cool place, we will be back!",
                "languageCode": "en"
              },
              "originalText": {
                "text": "We had a great meal, the service was amazing, the food was delicious and the atmosphere was comfortable and fun. Cool place, we will be back!",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Linda Brennan",
                "uri": "https://www.google.com/maps/contrib/116882475135672848500/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWqfDZNpZfvQgqRflGOyxXSzAxMBzH_Won9o7jZh8OPWyKUPtMZ=s128-c0x00000000-cc-rp-mo-ba3"
              },
              "publishTime": "2023-07-04T00:49:56Z"
            }
          ]
        }
      }
    },
    {
      "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE",
      "id": "ChIJJxzhxlYv2YgRTHCfXdcwAuE",
      "types": [
        "pizza_restaurant",
        "restaurant",
        "point_of_interest",
        "food",
        "establishment"
      ],
      "nationalPhoneNumber": "(561) 333-4949",
      "internationalPhoneNumber": "+1 561-333-4949",
      "formattedAddress": "9140 Forest Hill Blvd, Wellington, FL 33411, USA",
      "addressComponents": [
        {
          "longText": "9140",
          "shortText": "9140",
          "types": [
            "street_number"
          ],
          "languageCode": "en-US"
        },
        {
          "longText": "Forest Hill Boulevard",
          "shortText": "Forest Hill Blvd",
          "types": [
            "route"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Wellington",
          "shortText": "Wellington",
          "types": [
            "locality",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Palm Beach County",
          "shortText": "Palm Beach County",
          "types": [
            "administrative_area_level_2",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Florida",
          "shortText": "FL",
          "types": [
            "administrative_area_level_1",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "United States",
          "shortText": "US",
          "types": [
            "country",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "33411",
          "shortText": "33411",
          "types": [
            "postal_code"
          ],
          "languageCode": "en-US"
        }
      ],
      "plusCode": {
        "globalCode": "76RXJRX4+W6",
        "compoundCode": "JRX4+W6 Wellington, FL, USA"
      },
      "location": {
        "latitude": 26.6498089,
        "longitude": -80.1944275
      },
      "viewport": {
        "low": {
          "latitude": 26.648430769708497,
          "longitude": -80.1958438802915
        },
        "high": {
          "latitude": 26.651128730291504,
          "longitude": -80.1931459197085
        }
      },
      "rating": 4.6,
      "googleMapsUri": "https://maps.google.com/?cid=16213575310034038860",
      "websiteUri": "https://www.basilicospizza.com/",
      "regularOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 0,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 1,
              "hour": 21,
              "minute": 30
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 2,
              "hour": 21,
              "minute": 30
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 3,
              "hour": 21,
              "minute": 30
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 4,
              "hour": 21,
              "minute": 30
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 5,
              "hour": 21,
              "minute": 30
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 6,
              "hour": 21,
              "minute": 30
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 9:30 PM",
          "Tuesday: 11:00 AM – 9:30 PM",
          "Wednesday: 11:00 AM – 9:30 PM",
          "Thursday: 11:00 AM – 9:30 PM",
          "Friday: 11:00 AM – 9:30 PM",
          "Saturday: 11:00 AM – 9:30 PM",
          "Sunday: 11:00 AM – 9:00 PM"
        ]
      },
      "utcOffsetMinutes": -240,
      "adrFormatAddress": "\u003cspan class=\"street-address\"\u003e9140 Forest Hill Blvd\u003c/span\u003e, \u003cspan class=\"locality\"\u003eWellington\u003c/span\u003e, \u003cspan class=\"region\"\u003eFL\u003c/span\u003e \u003cspan class=\"postal-code\"\u003e33411\u003c/span\u003e, \u003cspan class=\"country-name\"\u003eUSA\u003c/span\u003e",
      "businessStatus": "OPERATIONAL",
      "priceLevel": "PRICE_LEVEL_MODERATE",
      "userRatingCount": 805,
      "iconMaskBaseUri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",
      "iconBackgroundColor": "#FF9E67",
      "displayName": {
        "text": "Basilico's Original Hand-Tossed Pizza",
        "languageCode": "en"
      },
      "primaryTypeDisplayName": {
        "text": "Pizza restaurant",
        "languageCode": "en"
      },
      "takeout": true,
      "delivery": false,
      "dineIn": true,
      "curbsidePickup": true,
      "reservable": false,
      "servesBreakfast": false,
      "servesLunch": true,
      "servesDinner": true,
      "servesBeer": false,
      "servesWine": false,
      "servesBrunch": false,
      "currentOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            },
            "close": {
              "day": 0,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            },
            "close": {
              "day": 1,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            },
            "close": {
              "day": 2,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            },
            "close": {
              "day": 3,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            },
            "close": {
              "day": 4,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            },
            "close": {
              "day": 5,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            },
            "close": {
              "day": 6,
              "hour": 21,
              "minute": 30,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 9:30 PM",
          "Tuesday: 11:00 AM – 9:30 PM",
          "Wednesday: 11:00 AM – 9:30 PM",
          "Thursday: 11:00 AM – 9:30 PM",
          "Friday: 11:00 AM – 9:30 PM",
          "Saturday: 11:00 AM – 9:30 PM",
          "Sunday: 11:00 AM – 9:00 PM"
        ]
      },
      "primaryType": "pizza_restaurant",
      "shortFormattedAddress": "9140 Forest Hill Blvd, Wellington",
      "editorialSummary": {
        "text": "Informal Italian restaurant specializing in build-your-own pizzas, plus stromboli & cheesesteaks.",
        "languageCode": "en"
      },
      "reviews": [
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChdDSUhNMG9nS0VJQ0FnSURqd0txTnZ3RRAB",
          "relativePublishTimeDescription": "4 months ago",
          "rating": 4,
          "text": {
            "text": "If you want a bit if New York  pizza. This place is busy. Always thinking of quality  of the product.  Seating outside  and inside.  Many pick up",
            "languageCode": "en"
          },
          "originalText": {
            "text": "If you want a bit if New York  pizza. This place is busy. Always thinking of quality  of the product.  Seating outside  and inside.  Many pick up",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Robert Miller",
            "uri": "https://www.google.com/maps/contrib/103842656316741617611/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWSDnyIbzX5rAI9U6HuUikyWWYOTt6TnENebzJ4CbxyJOE23wU=s128-c0x00000000-cc-rp-mo-ba8"
          },
          "publishTime": "2024-04-28T00:25:43Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChZDSUhNMG9nS0VJQ0FnSUNicTVEc1FBEAE",
          "relativePublishTimeDescription": "3 weeks ago",
          "rating": 5,
          "text": {
            "text": "I’ve lived here in Wellington for 11 years and I can’t believe that I didn’t discover this place sooner. The pizza was amazing and the garlic knots were really good but most of all the service and the owner were fantastic. I love pizza and at times I can be very picky. The  atmosphere, the smell of the place and the food was so good and so memorable that I will definitely be making this a weekly pizza spot.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "I’ve lived here in Wellington for 11 years and I can’t believe that I didn’t discover this place sooner. The pizza was amazing and the garlic knots were really good but most of all the service and the owner were fantastic. I love pizza and at times I can be very picky. The  atmosphere, the smell of the place and the food was so good and so memorable that I will definitely be making this a weekly pizza spot.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Renee Hammons",
            "uri": "https://www.google.com/maps/contrib/106829326700240918045/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVcsPgwoM47mpm5LkTmbQ8K3hNby5baMRkHeobxXcx4iiqlcMPeFQ=s128-c0x00000000-cc-rp-mo-ba3"
          },
          "publishTime": "2024-07-30T00:55:01Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChZDSUhNMG9nS0VJQ0FnSUN6dlAyVWZnEAE",
          "relativePublishTimeDescription": "2 months ago",
          "rating": 5,
          "text": {
            "text": "So I am writing this review after a disappointing experience that was completely turned around by the Management at this wonderful restaurant.  The food is fresh and delicious.  Our favorite dish besides their pizza is anything Franchese but it's a 'specialty' and absolutely AMAZING!! The owner Sal is friendly, ethical and goes above and beyond for his customers to make sure they're satisfied. Five S*T*A*R*S* for this family friendly business that appreciates loyalty!!",
            "languageCode": "en"
          },
          "originalText": {
            "text": "So I am writing this review after a disappointing experience that was completely turned around by the Management at this wonderful restaurant.  The food is fresh and delicious.  Our favorite dish besides their pizza is anything Franchese but it's a 'specialty' and absolutely AMAZING!! The owner Sal is friendly, ethical and goes above and beyond for his customers to make sure they're satisfied. Five S*T*A*R*S* for this family friendly business that appreciates loyalty!!",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Nanci Hutt",
            "uri": "https://www.google.com/maps/contrib/109233559592129631424/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocLRCxE-BkuvefWmc_-9ZFwInXk4PKLEqUmWLQBjqSVijsxPMw=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-05-31T19:32:43Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChdDSUhNMG9nS0VJQ0FnSURkOGNub3p3RRAB",
          "relativePublishTimeDescription": "6 months ago",
          "rating": 5,
          "text": {
            "text": "Incredible!!!\n\nI have supported this local Wellington gem for years and although they are known for their outstanding New York style Pizza, their Signature Strombolis are absolutely Incredible!!!   Hands down, the freshest and BEST Italian in Wellington. I am particularly addicted to their Eggplant Parmesan roll (stromboli) wrapped and baked inside their famous hand-tossed pizza dough and seasoned perfectly.  From their delicious authentic pasta entrees, fresh salads (my #1 favorite is the grilled chicken caesar salad, to their Signature Strombolis, Basilico’s, located in Kobosko’s Crossing is Simply the Best! Buon Appetito!!!-Loriana S.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Incredible!!!\n\nI have supported this local Wellington gem for years and although they are known for their outstanding New York style Pizza, their Signature Strombolis are absolutely Incredible!!!   Hands down, the freshest and BEST Italian in Wellington. I am particularly addicted to their Eggplant Parmesan roll (stromboli) wrapped and baked inside their famous hand-tossed pizza dough and seasoned perfectly.  From their delicious authentic pasta entrees, fresh salads (my #1 favorite is the grilled chicken caesar salad, to their Signature Strombolis, Basilico’s, located in Kobosko’s Crossing is Simply the Best! Buon Appetito!!!-Loriana S.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Loriana Beauty",
            "uri": "https://www.google.com/maps/contrib/113252681260707161905/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUZ8lcpJ3e9e6bnFPSOYmtxR-UP1DqanUv5KF3hanxbo6rXwp0J=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-02-24T17:18:29Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChZDSUhNMG9nS0VJQ0FnSURiNzg3Z0VBEAE",
          "relativePublishTimeDescription": "2 weeks ago",
          "rating": 2,
          "text": {
            "text": ",, totally won’t be eating any eggplant from here ,, stored on the floor under an oven with workers walking back and forth ,,",
            "languageCode": "en"
          },
          "originalText": {
            "text": ",, totally won’t be eating any eggplant from here ,, stored on the floor under an oven with workers walking back and forth ,,",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Gerri myrhammar",
            "uri": "https://www.google.com/maps/contrib/111910276677153802864/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWG5hvrkb5IVl6_tAFhk49fTcoHngh6KKNltswGcenHZ21J40M=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-08-10T20:44:56Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Cse7vkRRK4SKUxaq1dnFdiQVs4W0No4sC96z9wFR9wC8DqQO0FPYieoPyvMWPRomuzsuJOmKitTTv4F5sdOtljjB_AZtSJyNZLGCtdaxtSavTLOGbAZ9RronlaFJHyEBLERE9klBSfE3A2ekwNhhhLoEbZuxWmW-1Gn",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Basilico's Original Hand-Tossed Pizza",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CsUgP_7Cmni5yaANUvgixHhfQB0-AOK5YKN5mHCdCMaj6EaZlTo0o-8mIKrDJR7F21P_Us9w-tEyRVz8ffoQKCH6MFRjyt183K-BOB3eeo6tRd5Zkhg2bh8kTqkdk150ozK1LFBGr2i1UuTqd9G1Li59Zbf8W1UVe7m",
          "widthPx": 1399,
          "heightPx": 933,
          "authorAttributions": [
            {
              "displayName": "Basilico's Original Hand-Tossed Pizza",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CvJhNN6U7xTMvFkVK-7WmarYUmnGImRhvBqRN7T4J1syJBM3m4_MMNT0hjvWrO5-4SzFMUaektpQxbPkEM-CgssOniuLNjd_9p5nqpLubENI1YEokIB5C2WUhjcxmng6xR9Dglx5yksv7rQ7N7fTqXUX5J7vi-1p4Th",
          "widthPx": 4000,
          "heightPx": 2252,
          "authorAttributions": [
            {
              "displayName": "julie green",
              "uri": "//maps.google.com/maps/contrib/111356460621292953558",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjUnvolhmNeHg4BZhFj8lw-y09n2uyiSLHX3eX_xVDvmwwMXwCia=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Cuxqg9vuWwV0Q0dEvojUkPiJMj5WgliY_1u5w4c06Z3dWMEF3i7EV3-R_Xn39ZfFNbiPsGxnjzQMNC1imkCZQwPlcjyt1DrkDLjKnJNo5lx0T5YGneLBd02HyWylyjuqaczOV-w5ieq9iZn01WRXSy30zmXrxNiGclR",
          "widthPx": 4000,
          "heightPx": 2252,
          "authorAttributions": [
            {
              "displayName": "julie green",
              "uri": "//maps.google.com/maps/contrib/111356460621292953558",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjUnvolhmNeHg4BZhFj8lw-y09n2uyiSLHX3eX_xVDvmwwMXwCia=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CvvLIm7xEoMxP-XwsOnkXsOImVhB2fOotru_-Hf8XukvcSWt01ggSdmMMpuYDFfvRY7NEnoObd_q98bBxq-AzmKOT7q4Gji3I1sNHoiBRyfSt0vPGNj3--rFbGhYDUG02H9EsOwNZW3mO1UTRqa5Cco6ysgubwJ3uFc",
          "widthPx": 1399,
          "heightPx": 933,
          "authorAttributions": [
            {
              "displayName": "Basilico's Original Hand-Tossed Pizza",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CuESjeqa2LhwcQTDWZoH6eTYuPu9r8s6SP5Q8b-Ab0rN5eGHrRDOqQ4RbNlitwqdwEHD_kqNfNSG3LZC9KMRe05p5xwqJWsxKzxtEd5tZPYQ8tizaLl8rLGQE3iK78dG6P1IJN1KJwIp3jjdB03Q5MLLDKp7SHHQ0n8",
          "widthPx": 3060,
          "heightPx": 4080,
          "authorAttributions": [
            {
              "displayName": "Robert Miller",
              "uri": "//maps.google.com/maps/contrib/103842656316741617611",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWSDnyIbzX5rAI9U6HuUikyWWYOTt6TnENebzJ4CbxyJOE23wU=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CsimQzNaQEFQvU335Yi1hByRofbpUzaVXct510XMstLnoelV6hruroWNjfTMgaWgU2y919Po24yXE6JNBR21Bmqmf5BY9TNL4Zp_vqbJVDr942MgtCdySXFT1r69astVA3AufYONv6mfiW3nQ7ih0GXnM73N4gimEnq",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Alex Baker",
              "uri": "//maps.google.com/maps/contrib/104294414966295953565",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXMR5TNikjWpMitGC7xZnLysbEsnyXdRmesRCd-BXh8giT66v4=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CvfZZOW2G9wRN5QJ-K9V4JTUf5jsEYOdAUpbURtBs3u3gZfHxwiOAfJ9ww_N_ZmMn7Xg_dHIFWZoyAZT4N1ZHUC9NX444wVecwJ0m0lIaHfo1UrKxxPyKEwZ2VZGeAsqlkEEyrG5v7_AmhFO5AjONKfsoOaC8E6nctC",
          "widthPx": 4000,
          "heightPx": 2250,
          "authorAttributions": [
            {
              "displayName": "Lorri",
              "uri": "//maps.google.com/maps/contrib/110996702429196931028",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWMxERYsJY_RrFgiaMs4tkUr-jtPSK-PocEwL1Z5LPFr88kr2J97Q=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Cthz0WlZuqkFoaEnnR_jy26lQGctREuwvxPZNfiQIEVSQAzFI9PkumbAQGS4Nchk0Xihnv1KLklY0jt_3AL5H3J4fHdnIovqQfojlF8CdqZtitJ9vmic5JNr1WONhnb-Cqu_WFF3vQyz2HR4wIZbXiUuLIq9c2UChDY",
          "widthPx": 2252,
          "heightPx": 4000,
          "authorAttributions": [
            {
              "displayName": "julie green",
              "uri": "//maps.google.com/maps/contrib/111356460621292953558",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjUnvolhmNeHg4BZhFj8lw-y09n2uyiSLHX3eX_xVDvmwwMXwCia=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CtzPI8f4B9FWZ87Tz-0MnF-AxFca7TOML3lmeyIl7aL-Ry3H9L2C-lH1ajtTThRkI6Ka9WtmYqJoGqt59r8qZ_IGL2Z3Rz30et-eyRcLDB1A6wP3lZfpQopssZsoZ67N6w0rPhr7W3XJ8LJgQyjjM3h0MJGoq21X2dw",
          "widthPx": 1080,
          "heightPx": 1920,
          "authorAttributions": [
            {
              "displayName": "Donato Lombardi",
              "uri": "//maps.google.com/maps/contrib/113794483054080868513",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXivarZwQbRZzVRyXbnkeiDl6l3S1Yd58v0aXk7PX2EYWsT2IxNgw=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "outdoorSeating": true,
      "liveMusic": false,
      "menuForChildren": true,
      "servesCocktails": false,
      "servesDessert": true,
      "servesCoffee": true,
      "goodForChildren": true,
      "allowsDogs": false,
      "restroom": true,
      "goodForWatchingSports": false,
      "paymentOptions": {
        "acceptsCreditCards": true,
        "acceptsDebitCards": true,
        "acceptsCashOnly": false,
        "acceptsNfc": true
      },
      "parkingOptions": {
        "freeParkingLot": true,
        "freeStreetParking": true,
        "paidStreetParking": false,
        "valetParking": false
      },
      "accessibilityOptions": {
        "wheelchairAccessibleParking": true,
        "wheelchairAccessibleEntrance": true,
        "wheelchairAccessibleRestroom": true,
        "wheelchairAccessibleSeating": true
      },
      "generativeSummary": {
        "overview": {
          "text": "Casual venue dishing up New York-style pizza, plus salads, stromboli and cheesesteaks.",
          "languageCode": "en-US"
        }
      }
    },
    {
      "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4",
      "id": "ChIJS1Gox4Av2YgRpvAUEieEUq4",
      "types": [
        "pizza_restaurant",
        "meal_delivery",
        "restaurant",
        "point_of_interest",
        "food",
        "establishment"
      ],
      "nationalPhoneNumber": "(561) 422-2929",
      "internationalPhoneNumber": "+1 561-422-2929",
      "formattedAddress": "12020 S Shore Blvd, Wellington, FL 33414, USA",
      "addressComponents": [
        {
          "longText": "12020",
          "shortText": "12020",
          "types": [
            "street_number"
          ],
          "languageCode": "en-US"
        },
        {
          "longText": "South Shore Boulevard",
          "shortText": "S Shore Blvd",
          "types": [
            "route"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Wellington",
          "shortText": "Wellington",
          "types": [
            "locality",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Palm Beach County",
          "shortText": "Palm Beach County",
          "types": [
            "administrative_area_level_2",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Florida",
          "shortText": "FL",
          "types": [
            "administrative_area_level_1",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "United States",
          "shortText": "US",
          "types": [
            "country",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "33414",
          "shortText": "33414",
          "types": [
            "postal_code"
          ],
          "languageCode": "en-US"
        }
      ],
      "plusCode": {
        "globalCode": "76RXMQ27+58",
        "compoundCode": "MQ27+58 Wellington, FL, USA"
      },
      "location": {
        "latitude": 26.6503776,
        "longitude": -80.236738699999989
      },
      "viewport": {
        "low": {
          "latitude": 26.649092519708496,
          "longitude": -80.2379706302915
        },
        "high": {
          "latitude": 26.651790480291503,
          "longitude": -80.2352726697085
        }
      },
      "rating": 3.7,
      "googleMapsUri": "https://maps.google.com/?cid=12561247614031687846",
      "websiteUri": "https://www.lutinaspizzasubs.com/",
      "regularOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 1,
              "hour": 20,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 2,
              "hour": 20,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 3,
              "hour": 20,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 4,
              "hour": 20,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 5,
              "hour": 20,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 6,
              "hour": 20,
              "minute": 0
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 8:00 PM",
          "Tuesday: 11:00 AM – 8:00 PM",
          "Wednesday: 11:00 AM – 8:00 PM",
          "Thursday: 11:00 AM – 8:00 PM",
          "Friday: 11:00 AM – 8:00 PM",
          "Saturday: 11:00 AM – 8:00 PM",
          "Sunday: Closed"
        ]
      },
      "utcOffsetMinutes": -240,
      "adrFormatAddress": "\u003cspan class=\"street-address\"\u003e12020 S Shore Blvd\u003c/span\u003e, \u003cspan class=\"locality\"\u003eWellington\u003c/span\u003e, \u003cspan class=\"region\"\u003eFL\u003c/span\u003e \u003cspan class=\"postal-code\"\u003e33414\u003c/span\u003e, \u003cspan class=\"country-name\"\u003eUSA\u003c/span\u003e",
      "businessStatus": "OPERATIONAL",
      "priceLevel": "PRICE_LEVEL_INEXPENSIVE",
      "userRatingCount": 191,
      "iconMaskBaseUri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",
      "iconBackgroundColor": "#FF9E67",
      "displayName": {
        "text": "Lutina's Pizza & Subs",
        "languageCode": "en"
      },
      "primaryTypeDisplayName": {
        "text": "Pizza restaurant",
        "languageCode": "en"
      },
      "takeout": true,
      "delivery": true,
      "dineIn": true,
      "curbsidePickup": true,
      "reservable": false,
      "servesBreakfast": false,
      "servesLunch": true,
      "servesDinner": true,
      "servesBrunch": false,
      "currentOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            },
            "close": {
              "day": 1,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            },
            "close": {
              "day": 2,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            },
            "close": {
              "day": 3,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            },
            "close": {
              "day": 4,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            },
            "close": {
              "day": 5,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            },
            "close": {
              "day": 6,
              "hour": 20,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 8:00 PM",
          "Tuesday: 11:00 AM – 8:00 PM",
          "Wednesday: 11:00 AM – 8:00 PM",
          "Thursday: 11:00 AM – 8:00 PM",
          "Friday: 11:00 AM – 8:00 PM",
          "Saturday: 11:00 AM – 8:00 PM",
          "Sunday: Closed"
        ]
      },
      "primaryType": "pizza_restaurant",
      "shortFormattedAddress": "12020 S Shore Blvd, Wellington",
      "reviews": [
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSUNiOXNxdkVnEAE",
          "relativePublishTimeDescription": "a month ago",
          "rating": 2,
          "text": {
            "text": "Went in there at lunchtime to place an order for a couple slices of pizza and a chef salad for my wife. They let they told me that they were out of turkey. The turkey was frozen so my wife doesn’t eat ham so I said just give me a garden salad so they had already charged me and she said oh it’s gonna be the same price because I asked for extra cheese or whatever but it wasn’t so I went back to later and they gave me back four dollars but the lady had no Remorse at all. She thought she was doing me a favor when her service was terrible. OK her attitude was terrible. OK I used to come to this place at least once a week I’ve been living in Wellington for 12 years. I had just tried to give it another chance, but they need to take care of their employees because The front of the house is really not doing it. The pizza guy seems like a nice guy and he makes a good pizza but the girl in the front didn’t care at all",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Went in there at lunchtime to place an order for a couple slices of pizza and a chef salad for my wife. They let they told me that they were out of turkey. The turkey was frozen so my wife doesn’t eat ham so I said just give me a garden salad so they had already charged me and she said oh it’s gonna be the same price because I asked for extra cheese or whatever but it wasn’t so I went back to later and they gave me back four dollars but the lady had no Remorse at all. She thought she was doing me a favor when her service was terrible. OK her attitude was terrible. OK I used to come to this place at least once a week I’ve been living in Wellington for 12 years. I had just tried to give it another chance, but they need to take care of their employees because The front of the house is really not doing it. The pizza guy seems like a nice guy and he makes a good pizza but the girl in the front didn’t care at all",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Gaspare La Piana",
            "uri": "https://www.google.com/maps/contrib/108789322209849133942/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUJenMOxe38Gdy7Ay-oayykP5e93e71L466vXXZNQ0kfdOcAs4=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-07-27T00:46:05Z"
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSURyNkxPclJnEAE",
          "relativePublishTimeDescription": "a month ago",
          "rating": 1,
          "text": {
            "text": "We have had severals pizzas from here\nTonight was the worse pizza.  Ordered a meat lovers well done crust.  Get home and had a cheese pizza.  Yes maybe should have checked the box before i left.  Called to let them know and was put on hold while they tried to figure it out.  Was told to bring back the cheese pizza and they are going to remake ours.  I get there check the box and it was not well done.  They took the pizza back and did not put in the oven.  Looked like where they cook their pasta dishes.  Get the pizza home and it falling apart from all the grease.  Guess will be looking for anothet pizza restaurant",
            "languageCode": "en"
          },
          "originalText": {
            "text": "We have had severals pizzas from here\nTonight was the worse pizza.  Ordered a meat lovers well done crust.  Get home and had a cheese pizza.  Yes maybe should have checked the box before i left.  Called to let them know and was put on hold while they tried to figure it out.  Was told to bring back the cheese pizza and they are going to remake ours.  I get there check the box and it was not well done.  They took the pizza back and did not put in the oven.  Looked like where they cook their pasta dishes.  Get the pizza home and it falling apart from all the grease.  Guess will be looking for anothet pizza restaurant",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Lisa Elder",
            "uri": "https://www.google.com/maps/contrib/109032579427423447015/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocLzbl4kTAHO_emNcJjixoq1m8k8xlj22tswXqLn1B3p6FhiPg=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-07-13T23:48:08Z"
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChdDSUhNMG9nS0VJQ0FnSUM5aHNIN2hBRRAB",
          "relativePublishTimeDescription": "5 months ago",
          "rating": 5,
          "text": {
            "text": "Lutinas NEVER lets me down !! ! . I LOVE lutinas. Their pizzas are delicious, they are always top tier. The garlic knots are so yummy they really hit the spot, I ate all the pizza and all the garlic knots and I WILL do it again. Lutinas has the absolute pizza in wellington and no other place is even remotely better. Lutinas is MY pizza spot.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Lutinas NEVER lets me down !! ! . I LOVE lutinas. Their pizzas are delicious, they are always top tier. The garlic knots are so yummy they really hit the spot, I ate all the pizza and all the garlic knots and I WILL do it again. Lutinas has the absolute pizza in wellington and no other place is even remotely better. Lutinas is MY pizza spot.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Logan Shishkowsky",
            "uri": "https://www.google.com/maps/contrib/111615595935084955660/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocLVgnYPt6ZTuPa-Mtq9v6msfl7xyTPaQWfQxurH6Mlx7Ws5cQ=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-03-05T00:55:24Z"
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSURqX0stdFNREAE",
          "relativePublishTimeDescription": "3 months ago",
          "rating": 1,
          "text": {
            "text": "Horible pizza, run down facility, dirty disgusting eating environment. Waste of 25 Dallors. Burned crust, the layer of dairy that they somehow think is cheese is so salty. No water to drink. Save your money. Hand written prices on menus. Paint was coming off of the walls. Looked as if it wasn't cleaned since 1988. I'm never going there again. This place is run down, and there still scrambling for money.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Horible pizza, run down facility, dirty disgusting eating environment. Waste of 25 Dallors. Burned crust, the layer of dairy that they somehow think is cheese is so salty. No water to drink. Save your money. Hand written prices on menus. Paint was coming off of the walls. Looked as if it wasn't cleaned since 1988. I'm never going there again. This place is run down, and there still scrambling for money.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Alex",
            "uri": "https://www.google.com/maps/contrib/114546695129877997970/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJJTTuRS46GhQWuJFKp0odEeuIplDyqUAb8-eMSZuIfRSR7gw=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-04-30T20:19:29Z"
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSURqX08td0dREAE",
          "relativePublishTimeDescription": "3 months ago",
          "rating": 1,
          "text": {
            "text": "Dirty and disgusting eating environment. What they claimed to be cheese on the pizza was similar to the parmezan cheese on the table. Prices were hand written on the menu sloppily.When asked for a drink only soda was available and once the water was resupllied the cahier did not even tell us it had been resocked. The bathroom was horrific with no toilet paper being available and a very unclean bathroom. The walls of the restaurant where covered with dust and filth.Service was no existent. One pizza being $25 what a waste of money.  DO NOT GO HERE",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Dirty and disgusting eating environment. What they claimed to be cheese on the pizza was similar to the parmezan cheese on the table. Prices were hand written on the menu sloppily.When asked for a drink only soda was available and once the water was resupllied the cahier did not even tell us it had been resocked. The bathroom was horrific with no toilet paper being available and a very unclean bathroom. The walls of the restaurant where covered with dust and filth.Service was no existent. One pizza being $25 what a waste of money.  DO NOT GO HERE",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Matthew Zylacts",
            "uri": "https://www.google.com/maps/contrib/108325953989834561392/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJCpWLfZPjqxnK5wb76xFlIKvQGSAREhSBKMk9bXdwxT2PUnQ=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-04-30T20:19:50Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_Cv24gb5kFHmCJu-MUTFfRZBQmv_wmJi-y4LHmMb9UxYSMAwJWbo1jqnXKvZjTMx3qUZYffRlUoE-idoZCuS5_xQ4IZTwcxQowGIn24JCZN_5U9F4KHcjfC7Kp5fK0LecQLRYRiYjrzCFbIts7sDP-PHyfVTJgbC01GG",
          "widthPx": 2252,
          "heightPx": 4000,
          "authorAttributions": [
            {
              "displayName": "edwin anderson",
              "uri": "//maps.google.com/maps/contrib/104415924496813374036",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWIV1mVYBMdJuz_N0WW5ToD-HMAQKVu6q_K44myciWOnzYENJDc9A=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_Cva_9fWo1yFQmIgEMxpp2AsPqzzjRiEvqfd0rAW15mm0cAILMAaqSBo74sL1NPzZVN4AMYU77aGnjN6odk1rpDjzNjtG4_05MKfNJqtaqLzezq9Rod_K23Uc_lNF95vVPkSp8kp4FiJPuU2mtFwaDTId8g79jiQs3Qz",
          "widthPx": 1620,
          "heightPx": 1620,
          "authorAttributions": [
            {
              "displayName": "Chris King",
              "uri": "//maps.google.com/maps/contrib/109668511976803042713",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocLqMSc1O0h5-5bULB8wCYu-CWCeIwo7quNNyVYCrcHZ3mU-Cw=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_Cs6FAn4zyDiztMtRukv58ON-eKUOmmyJg4FUcpcDGAXpVguxK7NYZopwiaKB-sFK9DsJgBSSsfdx-hVUeoVGsnvt-E79TXiWVhka8xbOSJwtNTKQSaekdcMsNRyQrnmMO8_CNVqoT5VpckQTo11_xA8knLKIJL8etnq",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Alyssa Pate",
              "uri": "//maps.google.com/maps/contrib/110005503523698105752",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocLvtSJ-ao5gaRklIB7onBdB-ie0BvG3UM_INtghcmhikNnosQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CtpfLIQcim9w2DmOQ1V4IM0o13aGew5UJNeIcbeKqvYSoBLW-FBAIuwM8l9DJML73IeUihP2yWZ18DuEvbxyPvy-K802hnMe5BDfTwmgtS26tgNagWJZ8ChckpKzaCLw_xdW0Y-2PwxBNkeP9Nx7DqIzxl8WJI0cZBI",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Saveforlater vicki",
              "uri": "//maps.google.com/maps/contrib/102565561494700798660",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVtKdihia-jmVz_Wrp1keB69iklZeIANodDppyvf7kPnTVCUr7T=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CtqeJJmBSJLkBtr334eldAvKabPsgbuH5_Uq_mSf-j0url4_rPv_JJ86hJxO_ma57t-laEChevlrU9Rw66XQu_l2cQamIcp7voEHiHt9qrpZvao3aXFT5zv2isPS5YkJ0WOEKyOO-wpIblpUfo8rRAGDOdUZf_BpTbu",
          "widthPx": 2048,
          "heightPx": 1536,
          "authorAttributions": [
            {
              "displayName": "andree mcdonald",
              "uri": "//maps.google.com/maps/contrib/102407618112186357311",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocLEacA-c67N5f12yGaG9nFA9U96gcPcSoUCpwZjpXkNBKr0Cg=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CsM0ohAM89AYVYs2ZnKH0Oo8Fl_8REATN0N57KEUgpXFZKwg4ZAgbkp3dh0zmwagylgCaHu97YELpMXfNpwyIALizxkrsEvHT_7JmY62F0_yUbnciXYae-4kZEtSGzGOQo5g7yOXJNAxU1-kFTYyJAy6I9cC_WdoCA",
          "widthPx": 3264,
          "heightPx": 2448,
          "authorAttributions": [
            {
              "displayName": "Andrew Ibarra",
              "uri": "//maps.google.com/maps/contrib/111411253499407406065",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVT39BlJ378Zz2A9oVcyMuD3_CEfB9G5HeTOJyuU_5dFVudYSU=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CvsBg63aa6ga_p6b-3H589q_j5cjuhxZfCb934TbpgvR88xwJ9dFdbDfw_CPEPBPpWeXKZCXXLcVmFzkjFLLXhpxLUWMz0pImax0p0mlr8z7ZItkk8LHzbimg1-_eEuFxIdGoYeAtLg5FbbmulsdVHSU_-CVG55dKIi",
          "widthPx": 1536,
          "heightPx": 2048,
          "authorAttributions": [
            {
              "displayName": "Natalie Eisen",
              "uri": "//maps.google.com/maps/contrib/115329797175852813337",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocIOSZSaksdxJ6zSsNKskbt0gdGywNm-WstWFjQYNfKcoDTLTQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_Cu1IJl4V7fvrV77qKjFrfFzPtVbpTDHiTDW8hSZ8tf0iYtm3R8vgAHprrCoHHFs-CgfmvPtOZy-vXKYKESNpg61bzvtwsvIvDf4e-cyrXmz4n5nQRhMAkiz2Xlo9UQXpFt_EYWpTMDtDN2Wkq0a4L-B5akvbLr2J_wx",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "George Taylor",
              "uri": "//maps.google.com/maps/contrib/100754204318674302021",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocKAoRMjVFqpOu_4xU_CBwsEBqjh6or6h4RI4rDGO_zm5dOOL1zw=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CupbGcRDwja7VYXsGW0V9oO6-h_r7mWoqzz25DLU58rEmb5whhAiUX9HdtYbBjnlUBUi5SQk0crIbB_1Sj1d54_25Ozp5HSN_T5YesqLQ2qeogSCe6hQNeSA1-KcgJwpss8II--W_jJ9bUNjgzSlxCj4nTi1fALnW08",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Logan Shishkowsky",
              "uri": "//maps.google.com/maps/contrib/111615595935084955660",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocLVgnYPt6ZTuPa-Mtq9v6msfl7xyTPaQWfQxurH6Mlx7Ws5cQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CvPSCD5ptzBIPALkyyoMBc3Y32ii_GHFuooMVJFPC0k6ocet3KqLmkxbCPqsKpTxn5WHtrwZOyPdiSlh-jq9YcKCGmKAzpzBt-EfmUGCtomewukCaFCdhdJ7N45dmpErAj87uhNg6c16MvJzrcQvVnht6AYsAPaXKyN",
          "widthPx": 3120,
          "heightPx": 4160,
          "authorAttributions": [
            {
              "displayName": "Maura Cavaleri",
              "uri": "//maps.google.com/maps/contrib/115357234239782911397",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVfOKdYB6g1j4ol75wMGCJ60wumlztbf72q84drdLi2TChGy4Mocw=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "liveMusic": false,
      "servesDessert": true,
      "servesCoffee": false,
      "goodForChildren": true,
      "restroom": true,
      "goodForGroups": true,
      "paymentOptions": {
        "acceptsCreditCards": true,
        "acceptsDebitCards": true,
        "acceptsCashOnly": false,
        "acceptsNfc": true
      },
      "parkingOptions": {
        "freeParkingLot": true,
        "freeStreetParking": true,
        "valetParking": false
      },
      "accessibilityOptions": {
        "wheelchairAccessibleParking": true,
        "wheelchairAccessibleEntrance": true,
        "wheelchairAccessibleRestroom": true,
        "wheelchairAccessibleSeating": true
      },
      "generativeSummary": {
        "overview": {
          "text": "Pizzeria turning out New York style pies and other comfort food offerings for dine-in and takeout.",
          "languageCode": "en-US"
        },
        "description": {
          "text": "Pizzeria turning out New York style pies and other comfort food offerings for dine-in and takeout.\nIn addition to pizza, the menu includes appetizers, salads, calzones, strombolis, subs, and dinner entrees. Commonly ordered items are the stromboli, Sicilian pizza, and garlic knots. People also like the wings.\nThe restaurant has a cozy, casual atmosphere that's good for kids. Reviews say the staff is pleasant.\nCustomers typically spend $10–20.",
          "languageCode": "en-US"
        },
        "references": {
          "reviews": [
            {
              "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSURoMnZ2SUVREAE",
              "relativePublishTimeDescription": "a year ago",
              "rating": 2,
              "text": {
                "text": "Staff were pleasant and helpful when we placed our orders. However, place wasn't busy, we had to keep going back to the counter to make our needs known (ice water, silverware)! The tables were dirty, floors needed to be swept. Observed, sweet young girl (employee) spent time on phone at a nearby table... while waiting to serve  food for other customers?! Then sat back down. I was disappointed to see lack of cleanliness and overall use of \"restaurants protocol\"! 😞 Food was good (not great)! I will not be back! 2 stars 🌟",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Staff were pleasant and helpful when we placed our orders. However, place wasn't busy, we had to keep going back to the counter to make our needs known (ice water, silverware)! The tables were dirty, floors needed to be swept. Observed, sweet young girl (employee) spent time on phone at a nearby table... while waiting to serve  food for other customers?! Then sat back down. I was disappointed to see lack of cleanliness and overall use of \"restaurants protocol\"! 😞 Food was good (not great)! I will not be back! 2 stars 🌟",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Mary Long",
                "uri": "https://www.google.com/maps/contrib/108538508410653418570/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocIQ9Sz63s8uR68M_Ypwc72sE0stajk9Zr0EOEFK5OxBebZXIg=s128-c0x00000000-cc-rp-mo"
              },
              "publishTime": "2023-03-06T21:46:40Z"
            }
          ]
        }
      }
    },
    {
      "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs",
      "id": "ChIJ-0QaIEAv2YgRaUN8Kf2tERs",
      "types": [
        "restaurant",
        "point_of_interest",
        "food",
        "establishment"
      ],
      "nationalPhoneNumber": "(561) 559-3201",
      "internationalPhoneNumber": "+1 561-559-3201",
      "formattedAddress": "10160 Forest Hill Blvd Suite 110, Wellington, FL 33414, USA",
      "addressComponents": [
        {
          "longText": "Suite 110",
          "shortText": "Suite 110",
          "types": [
            "subpremise"
          ],
          "languageCode": "en"
        },
        {
          "longText": "10160",
          "shortText": "10160",
          "types": [
            "street_number"
          ],
          "languageCode": "en-US"
        },
        {
          "longText": "Forest Hill Boulevard",
          "shortText": "Forest Hill Blvd",
          "types": [
            "route"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Wellington",
          "shortText": "Wellington",
          "types": [
            "locality",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Palm Beach County",
          "shortText": "Palm Beach County",
          "types": [
            "administrative_area_level_2",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Florida",
          "shortText": "FL",
          "types": [
            "administrative_area_level_1",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "United States",
          "shortText": "US",
          "types": [
            "country",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "33414",
          "shortText": "33414",
          "types": [
            "postal_code"
          ],
          "languageCode": "en-US"
        }
      ],
      "plusCode": {
        "globalCode": "76RXJQXV+HF",
        "compoundCode": "JQXV+HF Wellington, FL, USA"
      },
      "location": {
        "latitude": 26.648988199999998,
        "longitude": -80.206262099999989
      },
      "viewport": {
        "low": {
          "latitude": 26.647601419708497,
          "longitude": -80.2075436302915
        },
        "high": {
          "latitude": 26.6502993802915,
          "longitude": -80.20484566970849
        }
      },
      "rating": 4.6,
      "googleMapsUri": "https://maps.google.com/?cid=1950531416462476137",
      "websiteUri": "http://victorspizzacafe.com/",
      "regularOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 0,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 1,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 2,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 3,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 4,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 10:00 PM",
          "Tuesday: 11:00 AM – 10:00 PM",
          "Wednesday: 11:00 AM – 10:00 PM",
          "Thursday: 11:00 AM – 10:00 PM",
          "Friday: 11:00 AM – 10:00 PM",
          "Saturday: 11:00 AM – 10:00 PM",
          "Sunday: 11:00 AM – 10:00 PM"
        ]
      },
      "utcOffsetMinutes": -240,
      "adrFormatAddress": "\u003cspan class=\"street-address\"\u003e10160 Forest Hill Blvd Suite 110\u003c/span\u003e, \u003cspan class=\"locality\"\u003eWellington\u003c/span\u003e, \u003cspan class=\"region\"\u003eFL\u003c/span\u003e \u003cspan class=\"postal-code\"\u003e33414\u003c/span\u003e, \u003cspan class=\"country-name\"\u003eUSA\u003c/span\u003e",
      "businessStatus": "OPERATIONAL",
      "priceLevel": "PRICE_LEVEL_MODERATE",
      "userRatingCount": 102,
      "iconMaskBaseUri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",
      "iconBackgroundColor": "#FF9E67",
      "displayName": {
        "text": "Victor's Pizza Cafe",
        "languageCode": "en"
      },
      "primaryTypeDisplayName": {
        "text": "Restaurant",
        "languageCode": "en"
      },
      "takeout": true,
      "delivery": true,
      "dineIn": true,
      "curbsidePickup": true,
      "reservable": true,
      "servesLunch": true,
      "servesDinner": true,
      "servesBeer": true,
      "servesWine": true,
      "servesBrunch": true,
      "servesVegetarianFood": true,
      "currentOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            },
            "close": {
              "day": 0,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            },
            "close": {
              "day": 1,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            },
            "close": {
              "day": 2,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            },
            "close": {
              "day": 3,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            },
            "close": {
              "day": 4,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 10:00 PM",
          "Tuesday: 11:00 AM – 10:00 PM",
          "Wednesday: 11:00 AM – 10:00 PM",
          "Thursday: 11:00 AM – 10:00 PM",
          "Friday: 11:00 AM – 10:00 PM",
          "Saturday: 11:00 AM – 10:00 PM",
          "Sunday: 11:00 AM – 10:00 PM"
        ]
      },
      "primaryType": "restaurant",
      "shortFormattedAddress": "10160 Forest Hill Blvd Suite 110, Wellington",
      "reviews": [
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSURaeFpTZV9BRRAB",
          "relativePublishTimeDescription": "10 months ago",
          "rating": 1,
          "text": {
            "text": "This was our first outing to this place.  Mixed reviews and wanted to give it a try.  When you walk in there is a certain odor in the air that's a bit unpleasant.  Hot inside as well.  Granted the ovens are on.  We ordered a veggie pie, chicken parm platter and sandwich.   So here is my opinion regarding the food.  The pizza was not bad.  The dough could use a bit more salt.  Will be back to try the other pizzas and nothing else.  Here is the negative news.  The appetizer of shrimp and calamari was chewy and bland.\nPasta was cooked almost right.  But the sauce had this funky taste.  Not sure if they added cinnamon or something else to the sauce.  The chicken parm was just battered and fried with no seasoning.  The house salad looked depressed.  Maybe it was an off day but who knows.  Hopefully they read these comments to improve and succeed.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "This was our first outing to this place.  Mixed reviews and wanted to give it a try.  When you walk in there is a certain odor in the air that's a bit unpleasant.  Hot inside as well.  Granted the ovens are on.  We ordered a veggie pie, chicken parm platter and sandwich.   So here is my opinion regarding the food.  The pizza was not bad.  The dough could use a bit more salt.  Will be back to try the other pizzas and nothing else.  Here is the negative news.  The appetizer of shrimp and calamari was chewy and bland.\nPasta was cooked almost right.  But the sauce had this funky taste.  Not sure if they added cinnamon or something else to the sauce.  The chicken parm was just battered and fried with no seasoning.  The house salad looked depressed.  Maybe it was an off day but who knows.  Hopefully they read these comments to improve and succeed.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Bruce C.",
            "uri": "https://www.google.com/maps/contrib/112258822683075332280/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUm3of4aOpVHw6VsgLyzDWfXJG7CZBSu6H0QzyWglomXgGW1_f_0g=s128-c0x00000000-cc-rp-mo-ba4"
          },
          "publishTime": "2023-10-04T22:26:03Z"
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSUM3bjhfcTJRRRAB",
          "relativePublishTimeDescription": "a week ago",
          "rating": 4,
          "text": {
            "text": "My wife and I decided to try this restaurant.  I ordered the chicken parm. The chicken was delicious.  My only complaint was the sauce. I love a bright red tomato sauce. The sauce was more an orange color.\nIt tasted fine, but not the typical sauce I am used to getting.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "My wife and I decided to try this restaurant.  I ordered the chicken parm. The chicken was delicious.  My only complaint was the sauce. I love a bright red tomato sauce. The sauce was more an orange color.\nIt tasted fine, but not the typical sauce I am used to getting.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Michael Astor",
            "uri": "https://www.google.com/maps/contrib/114320094124052080795/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJJFB0Y3LmhZO5gtET8HHTHfdEGL53pgy31g6u9OG9gEVjv=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-08-19T15:20:58Z"
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChZDSUhNMG9nS0VJQ0FnSUM5bEpYallBEAE",
          "relativePublishTimeDescription": "5 months ago",
          "rating": 5,
          "text": {
            "text": "The best authentic Italian food around! Consistently good, family owned very friendly and personable. Food is amazing on point every time🇮🇹🍝🍕And get the tartufo desert!😋",
            "languageCode": "en"
          },
          "originalText": {
            "text": "The best authentic Italian food around! Consistently good, family owned very friendly and personable. Food is amazing on point every time🇮🇹🍝🍕And get the tartufo desert!😋",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Debbie Infantino",
            "uri": "https://www.google.com/maps/contrib/117186046332580545099/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVHDZWkL99SvrBAoUZ2BTduG7taFK-imVOmF4ytsHlwIG9tG-eefg=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-03-07T01:43:03Z"
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSURib3BQLW1BRRAB",
          "relativePublishTimeDescription": "3 weeks ago",
          "rating": 5,
          "text": {
            "text": "The chicken Ramona is fantastic! The sauce is flavorful and the chicken moist and tender.  The potatoes that it comes with are nothing special would probably be better paired with pasta. The garlic knots are amazing!!! My hubby got chicken Alfredo which was also delicious nice and creamy. My only suggestion would be to make the chicken in strips instead of the tiny chunks but everything tasted great",
            "languageCode": "en"
          },
          "originalText": {
            "text": "The chicken Ramona is fantastic! The sauce is flavorful and the chicken moist and tender.  The potatoes that it comes with are nothing special would probably be better paired with pasta. The garlic knots are amazing!!! My hubby got chicken Alfredo which was also delicious nice and creamy. My only suggestion would be to make the chicken in strips instead of the tiny chunks but everything tasted great",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Chris B",
            "uri": "https://www.google.com/maps/contrib/114934338453363726997/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJyHQT52E6uz4qkPFOzO_q3-CiMKLfQQwSJzWPiw_aVxGbRfA=s128-c0x00000000-cc-rp-mo-ba2"
          },
          "publishTime": "2024-08-03T14:37:30Z"
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSUM3MXZQb19RRRAB",
          "relativePublishTimeDescription": "a week ago",
          "rating": 5,
          "text": {
            "text": "This is a small pizza restaurant with both indoor and outdoor seating. I had a shrimp pizza which was perfect; perfect thin crust and amount of cheese and other ingredients. Freshly made with fresh ingredients. Friendly atmosphere.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "This is a small pizza restaurant with both indoor and outdoor seating. I had a shrimp pizza which was perfect; perfect thin crust and amount of cheese and other ingredients. Freshly made with fresh ingredients. Friendly atmosphere.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Dorothy Johnson",
            "uri": "https://www.google.com/maps/contrib/104689800713911503507/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJ5F8rdfZfvJQRF_ttLESsA-WuzDyQ8qmAV_N2qa-5EztMm9w=s128-c0x00000000-cc-rp-mo-ba4"
          },
          "publishTime": "2024-08-15T14:07:04Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_Ct4lmStw3MAcJHwsC3kB_PDZ7bYsRXSVv_89eucAmNGd2MQMOvzktL4VLhQQF9HYMdp9VTXogXpGtGcPSfcwAGyThjgM2aaF_cWyBq7rEw3CShthMvOjxnmRQC7rgaO8HKv6ZaY04osjuuUKNNcpcatoSNlm0kZTH02",
          "widthPx": 4000,
          "heightPx": 1868,
          "authorAttributions": [
            {
              "displayName": "edwin anderson",
              "uri": "//maps.google.com/maps/contrib/104415924496813374036",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWIV1mVYBMdJuz_N0WW5ToD-HMAQKVu6q_K44myciWOnzYENJDc9A=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CtMpf635rzXJVM9k_y086H7KjmrNLfdhbBNmf-ZRYa9RFWv0uOtWE51BtSIlc_eSLS213E2e7oMngh3s4OlbVPrH6vkoIsVEb8Y-13GXIMp2liYuCyY4kVw8zwzdkaz3Ytuu-5GPjVEUCBn6BADr_93pqHUl0ZpAo0P",
          "widthPx": 2880,
          "heightPx": 1800,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CuJVXe7A5LSe7no6uAZi13FmcurI-LHWUCq09cz1x_yGI0N_4Ho4uIjhntoDv1IgZZP_n0QAr8kYZKaVCh3gD4aEVlibpQ0Z_ypT1grdaOolJ5LntGzXoL0Qsm97LmMpYN3E6EREwRwJXclXkTv-Mg6ChdsWvTVMQXQ",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CtZk9VBZQo6xNkmNs0yxjOJQWtaKsrj-txwSHQHHAud-lVxzkTwU1O8dXrSRr0T-_uRQlqAT3V-kOeBEJ_O8fXtcnOZA24gskQnHwCIg68OpuCYC8v62l8Qkaatj6j7Y4bKuGRPRoqxcdzlVyIrCyY8LzUE4oqgP58J",
          "widthPx": 4000,
          "heightPx": 3000,
          "authorAttributions": [
            {
              "displayName": "Matthew Kurit",
              "uri": "//maps.google.com/maps/contrib/101677645721048617389",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWgt0QYmIuFaNfeYvgOsNiRLHa5EfUFpCBzquwC3R8bSrvZoC74=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CvQW17Na5-6m1kd3MgjVYAu3wYKYNY5UhBl3LkUiR4gH9eQGIo3USrFMg_db5sxkEOyX0LxwfJ_ECwTP6_ehkwUUim7fmSDxl3Qq2CMmYVB1zezrnwaMuCvCfqEiZPekV6t-w8tIH_lCmCCQEHpphSQTx70htq5wJia",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Ramona Divivo",
              "uri": "//maps.google.com/maps/contrib/108160939007624730377",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocKk_Y6MMWtJ5rx0iLBKRalhidzqXDAF5n_YFREmWZ_VCOidIWo=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_Ctmo-8iW9-4gbA-iSnjXHMhkLcFVyi3_YQf0GbQicIpysESCHOgcV2W_rCYVgVofZzLj0eg8mNaZXiuyHelzuIHJaUgunivvVsfOnb0SUEPcrsYwH2CIKhxnby3TzgLb2I_7dqD5ZqMKL8zyMjc5JIUd2AGnnxN0sdq",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CtnBNncZyaEAhPedmLAHAUBroY5-P3d6sLxd4NeFMDXhW_QjDq4Y_cQmVR6YVNRCBqnzGGkM8xWuwkVtjyRvW8AGp0z2LblwLeiIwY83MfAh1TTpcotrCl5Yicvz3-9xmaOB8bQq_ftECXxdzkqWmlIkNUeuIqd4gHy",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CtIFQLY5ikgwu9yZ_Dn4o6k0Gs-rMmengyFCUnp-V4dlxUHnYr_XQ00zz_r1AOXe4-vSgR0e3BXED5V853Hvj_QK8D73C9BWzajsDG12MZx-8L288MDx_oJWzshxxsL1Bo041KR-wgq6cNMJnlMmOwppo_IO7qB_r61",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CsLcE-x9R4lzjUYFXT4IMky-iF8tiRQqD9pkEKEYs-y2eTEXi6FIkX4JdcLzxY8TbEsPuP_GWth72jucCwo7hDZs3YWhLybCCC_fRBW_QC6p2kzoQPZWvr8eIUgzxXJfeW0JYtbuyerB39-mi_TvkOrN0jv7EY1AHNd",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Rosa Grue",
              "uri": "//maps.google.com/maps/contrib/100523454936735619103",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocKMS4P_c4lPi8ejmuCd-KyDBKFj5w_YJ2BJNvQQJhvEJV8HPw=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CvatN07ChEMd4Ry3jHbGtVCOtRo807hmwqZfH2SHLCDDe6gaqPStrUjMRCmRRQ3kR52pI2uzkG_OAS_bmIYwKHzpz9EBcGuTflmEtK08WW9RivK0STYoHzvl-gjQRZ5QpuzxKjzyk0fiWsoyTWYU4yfHOjwTPKnocWA",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Victor's Pizza Cafe",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "outdoorSeating": true,
      "menuForChildren": true,
      "servesDessert": true,
      "servesCoffee": true,
      "goodForChildren": true,
      "allowsDogs": true,
      "restroom": true,
      "goodForGroups": true,
      "paymentOptions": {
        "acceptsCreditCards": true,
        "acceptsDebitCards": true,
        "acceptsCashOnly": false,
        "acceptsNfc": true
      },
      "parkingOptions": {
        "freeParkingLot": true,
        "freeStreetParking": true
      },
      "accessibilityOptions": {
        "wheelchairAccessibleParking": true,
        "wheelchairAccessibleEntrance": true,
        "wheelchairAccessibleRestroom": true,
        "wheelchairAccessibleSeating": true
      },
      "generativeSummary": {
        "overview": {
          "text": "Family-friendly restaurant serving a variety of pizzas, sandwiches, salads and other Italian eats.",
          "languageCode": "en-US"
        }
      }
    },
    {
      "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc",
      "id": "ChIJAceb3fMl2YgRGrBuYyo3_mc",
      "types": [
        "pizza_restaurant",
        "restaurant",
        "point_of_interest",
        "food",
        "establishment"
      ],
      "nationalPhoneNumber": "(561) 328-6401",
      "internationalPhoneNumber": "+1 561-328-6401",
      "formattedAddress": "2793 S State Rd 7 Suite 300, Wellington, FL 33414, USA",
      "addressComponents": [
        {
          "longText": "Suite 300",
          "shortText": "Suite 300",
          "types": [
            "subpremise"
          ],
          "languageCode": "en"
        },
        {
          "longText": "2793",
          "shortText": "2793",
          "types": [
            "street_number"
          ],
          "languageCode": "en-US"
        },
        {
          "longText": "South State Road 7",
          "shortText": "S State Rd 7",
          "types": [
            "route"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Wellington",
          "shortText": "Wellington",
          "types": [
            "locality",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Palm Beach County",
          "shortText": "Palm Beach County",
          "types": [
            "administrative_area_level_2",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "Florida",
          "shortText": "FL",
          "types": [
            "administrative_area_level_1",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "United States",
          "shortText": "US",
          "types": [
            "country",
            "political"
          ],
          "languageCode": "en"
        },
        {
          "longText": "33414",
          "shortText": "33414",
          "types": [
            "postal_code"
          ],
          "languageCode": "en-US"
        }
      ],
      "plusCode": {
        "globalCode": "76RXJQQV+8Q",
        "compoundCode": "JQQV+8Q Wellington, FL, USA"
      },
      "location": {
        "latitude": 26.638361999999997,
        "longitude": -80.2055992
      },
      "viewport": {
        "low": {
          "latitude": 26.6370438197085,
          "longitude": -80.2068239302915
        },
        "high": {
          "latitude": 26.639741780291505,
          "longitude": -80.204125969708485
        }
      },
      "rating": 4.2,
      "googleMapsUri": "https://maps.google.com/?cid=7493487485187436570",
      "websiteUri": "https://www.jimmybrooklynpizza.com/",
      "regularOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 0,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 1,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 2,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 3,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 4,
              "hour": 21,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 9:00 PM",
          "Tuesday: 11:00 AM – 9:00 PM",
          "Wednesday: 11:00 AM – 9:00 PM",
          "Thursday: 11:00 AM – 9:00 PM",
          "Friday: 11:00 AM – 10:00 PM",
          "Saturday: 11:00 AM – 10:00 PM",
          "Sunday: 11:00 AM – 9:00 PM"
        ]
      },
      "utcOffsetMinutes": -240,
      "adrFormatAddress": "\u003cspan class=\"street-address\"\u003e2793 S State Rd 7 Suite 300\u003c/span\u003e, \u003cspan class=\"locality\"\u003eWellington\u003c/span\u003e, \u003cspan class=\"region\"\u003eFL\u003c/span\u003e \u003cspan class=\"postal-code\"\u003e33414\u003c/span\u003e, \u003cspan class=\"country-name\"\u003eUSA\u003c/span\u003e",
      "businessStatus": "OPERATIONAL",
      "priceLevel": "PRICE_LEVEL_INEXPENSIVE",
      "userRatingCount": 648,
      "iconMaskBaseUri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",
      "iconBackgroundColor": "#FF9E67",
      "displayName": {
        "text": "Jimmy Brooklyn's Pizza Parlor",
        "languageCode": "en"
      },
      "primaryTypeDisplayName": {
        "text": "Pizza restaurant",
        "languageCode": "en"
      },
      "takeout": true,
      "delivery": true,
      "dineIn": true,
      "reservable": false,
      "servesBreakfast": false,
      "servesLunch": true,
      "servesDinner": true,
      "servesBeer": true,
      "servesBrunch": false,
      "currentOpeningHours": {
        "openNow": true,
        "periods": [
          {
            "open": {
              "day": 0,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            },
            "close": {
              "day": 0,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 9,
                "day": 1
              }
            }
          },
          {
            "open": {
              "day": 1,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            },
            "close": {
              "day": 1,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 26
              }
            }
          },
          {
            "open": {
              "day": 2,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            },
            "close": {
              "day": 2,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 27
              }
            }
          },
          {
            "open": {
              "day": 3,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            },
            "close": {
              "day": 3,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 28
              }
            }
          },
          {
            "open": {
              "day": 4,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            },
            "close": {
              "day": 4,
              "hour": 21,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 29
              }
            }
          },
          {
            "open": {
              "day": 5,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            },
            "close": {
              "day": 5,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 30
              }
            }
          },
          {
            "open": {
              "day": 6,
              "hour": 11,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            },
            "close": {
              "day": 6,
              "hour": 22,
              "minute": 0,
              "date": {
                "year": 2024,
                "month": 8,
                "day": 31
              }
            }
          }
        ],
        "weekdayDescriptions": [
          "Monday: 11:00 AM – 9:00 PM",
          "Tuesday: 11:00 AM – 9:00 PM",
          "Wednesday: 11:00 AM – 9:00 PM",
          "Thursday: 11:00 AM – 9:00 PM",
          "Friday: 11:00 AM – 10:00 PM",
          "Saturday: 11:00 AM – 10:00 PM",
          "Sunday: 11:00 AM – 9:00 PM"
        ]
      },
      "primaryType": "pizza_restaurant",
      "shortFormattedAddress": "2793 S State Rd 7 Suite 300, Wellington",
      "reviews": [
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChZDSUhNMG9nS0VJQ0FnSUNUbHZqdWZBEAE",
          "relativePublishTimeDescription": "3 months ago",
          "rating": 5,
          "text": {
            "text": "We’ve been coming here since they opened. They have a great variety of  single slices and they’re delicious. We usually get take out, call ahead if you can cause the wait can seem long but worth it. They have a soda fountain if you’re dining in you can refill your drinks .",
            "languageCode": "en"
          },
          "originalText": {
            "text": "We’ve been coming here since they opened. They have a great variety of  single slices and they’re delicious. We usually get take out, call ahead if you can cause the wait can seem long but worth it. They have a soda fountain if you’re dining in you can refill your drinks .",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Linda Brennan",
            "uri": "https://www.google.com/maps/contrib/116882475135672848500/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWqfDZNpZfvQgqRflGOyxXSzAxMBzH_Won9o7jZh8OPWyKUPtMZ=s128-c0x00000000-cc-rp-mo-ba3"
          },
          "publishTime": "2024-05-14T10:04:37Z"
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChZDSUhNMG9nS0VJQ0FnSUR6NWZyWENnEAE",
          "relativePublishTimeDescription": "2 months ago",
          "rating": 5,
          "text": {
            "text": "Where do I begin, It’s been 15 years here in Florida and I have searched for the best pizza 🍕 around and nothing, nothing has compare to New York Brooklyn pizza.  But today was different I was with my mother a native of New York,  She’s live in Brooklyn her whole life.  While passing through this plaza we came a cross this pizzeria that was called Jimmy’s Brooklyn Pizza 🍕 Parlor, I told my mom what do you think and she said we will be the judge lol 😆 When we walked in we were greeted just like we would if we were in Brooklyn such a great feeling.  We ordered and sat down a lovely young lady bought our pizza and soda still making us feel like we were family and the rest was history fugatabout it lol, the pizza was perfect crispy, cheesy perfection to the tee sauce was delicious omg I was in heaven. I found it finally in Royal Palm Beach/ Wellington Palm beach.  People when I tell you, if you miss New York Pizza this is the spot you won’t regret it.  Even my mother said wow it’s great to be home again 😘🙂 Thank You to the staff for making it all perfect.  I can’t forget the scenery all the beautiful pictures my mother and I went down memory lane.  Here’s some pictures that they allowed me to take I should of taken pictures of the incredible staff next time, I pinky promise.  The pizza is gum melting delicious if you know you know my Brooklyn people.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Where do I begin, It’s been 15 years here in Florida and I have searched for the best pizza 🍕 around and nothing, nothing has compare to New York Brooklyn pizza.  But today was different I was with my mother a native of New York,  She’s live in Brooklyn her whole life.  While passing through this plaza we came a cross this pizzeria that was called Jimmy’s Brooklyn Pizza 🍕 Parlor, I told my mom what do you think and she said we will be the judge lol 😆 When we walked in we were greeted just like we would if we were in Brooklyn such a great feeling.  We ordered and sat down a lovely young lady bought our pizza and soda still making us feel like we were family and the rest was history fugatabout it lol, the pizza was perfect crispy, cheesy perfection to the tee sauce was delicious omg I was in heaven. I found it finally in Royal Palm Beach/ Wellington Palm beach.  People when I tell you, if you miss New York Pizza this is the spot you won’t regret it.  Even my mother said wow it’s great to be home again 😘🙂 Thank You to the staff for making it all perfect.  I can’t forget the scenery all the beautiful pictures my mother and I went down memory lane.  Here’s some pictures that they allowed me to take I should of taken pictures of the incredible staff next time, I pinky promise.  The pizza is gum melting delicious if you know you know my Brooklyn people.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "SgtMiracle",
            "uri": "https://www.google.com/maps/contrib/116887314721488207401/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXbI1DHtpFLM2loRElDXxq7aogbOGIcM3FaTTQOtSdVRqGgfX825A=s128-c0x00000000-cc-rp-mo-ba4"
          },
          "publishTime": "2024-06-11T05:09:54Z"
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChdDSUhNMG9nS0VJQ0FnSUR6Z0tTZnBnRRAB",
          "relativePublishTimeDescription": "2 months ago",
          "rating": 5,
          "text": {
            "text": "These guys know how to make a great 🍕 pizza! It's perfection every time. I'd like to add that they have an amazing Marsala sauce and their antipasto is really good too. All around 👍 thumbs up!",
            "languageCode": "en"
          },
          "originalText": {
            "text": "These guys know how to make a great 🍕 pizza! It's perfection every time. I'd like to add that they have an amazing Marsala sauce and their antipasto is really good too. All around 👍 thumbs up!",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Sherry Minot",
            "uri": "https://www.google.com/maps/contrib/112224207273269810816/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVsQyTGrsAuPGjfC3CfHZkS4NGENSA8Qu7ljVX_PJI1JKvwqN5p0A=s128-c0x00000000-cc-rp-mo-ba4"
          },
          "publishTime": "2024-06-06T17:35:44Z"
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChdDSUhNMG9nS0VJQ0FnSUM5dElEcThBRRAB",
          "relativePublishTimeDescription": "5 months ago",
          "rating": 5,
          "text": {
            "text": "House special Sicilian pie!! Oh my! Fantastic!\nAnyone who says they can't find good pizza outside of N.Y. needs to come here. It's the second time we ordered this pie and it is a winner again.\nThe place was packed and the staff was really hustling.  Our order was ready on time for pickup and was hot and fresh.\nThe pie weighs a ton and is loaded with all the toppings. We barely could make a dent in it.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "House special Sicilian pie!! Oh my! Fantastic!\nAnyone who says they can't find good pizza outside of N.Y. needs to come here. It's the second time we ordered this pie and it is a winner again.\nThe place was packed and the staff was really hustling.  Our order was ready on time for pickup and was hot and fresh.\nThe pie weighs a ton and is loaded with all the toppings. We barely could make a dent in it.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Christina Waters",
            "uri": "https://www.google.com/maps/contrib/103756618873093648264/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJanX6YKDpDZBX_CYQZlVK9ulaliDjxJLMbk04lWY5vPq0ITw=s128-c0x00000000-cc-rp-mo"
          },
          "publishTime": "2024-03-03T00:20:02Z"
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChZDSUhNMG9nS0VJQ0FnSURwdTUzekJREAE",
          "relativePublishTimeDescription": "12 months ago",
          "rating": 5,
          "text": {
            "text": "It's been a few years since I've been in the neighborhood. I was having tests done nearby and decided to stop and get a few slices to heat when I get home.\n1.  The place is spotless with a real NY      pizzeria vibe!\n2. Friendly & welcoming quick service\n3. Easy parking\n4. Delicious NY Style pizza\n(crust still needs some improvement)\n5. Affordable, great prices\n\nI asked for one regular slice of cheese pizza and one slice of white pizza to go    (not heated)\nFirst night I heated the cheese slice in my convection/air fryer oven. I spread a little butter & olive oil on the bottom and top crust  before putting it in..\nMakes all the difference in the world! It was absolutely delicious! I could fold and eat! The sauce to cheese ratio is perfect and sweet enough for an authentic slice! Refer to my pictures.\nThe second night I heated up the white pizza applying the same butter and olive oil to the bottom and top crust. Definitely order the white pizza! It is one of the best I've ever had! Loads of Creamy ricotta and mozzarella- it was actually a heavy slice and huge!\nA great value! I highly recommend!\nA quick tip- please add some olive oil and cut in some butter to the pizza dough and then your pizza will be perfect! I still enjoy it!",
            "languageCode": "en"
          },
          "originalText": {
            "text": "It's been a few years since I've been in the neighborhood. I was having tests done nearby and decided to stop and get a few slices to heat when I get home.\n1.  The place is spotless with a real NY      pizzeria vibe!\n2. Friendly & welcoming quick service\n3. Easy parking\n4. Delicious NY Style pizza\n(crust still needs some improvement)\n5. Affordable, great prices\n\nI asked for one regular slice of cheese pizza and one slice of white pizza to go    (not heated)\nFirst night I heated the cheese slice in my convection/air fryer oven. I spread a little butter & olive oil on the bottom and top crust  before putting it in..\nMakes all the difference in the world! It was absolutely delicious! I could fold and eat! The sauce to cheese ratio is perfect and sweet enough for an authentic slice! Refer to my pictures.\nThe second night I heated up the white pizza applying the same butter and olive oil to the bottom and top crust. Definitely order the white pizza! It is one of the best I've ever had! Loads of Creamy ricotta and mozzarella- it was actually a heavy slice and huge!\nA great value! I highly recommend!\nA quick tip- please add some olive oil and cut in some butter to the pizza dough and then your pizza will be perfect! I still enjoy it!",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Georgette “GG” George-Quinn",
            "uri": "https://www.google.com/maps/contrib/110548062283867757041/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXWfVyMkDfU25d5l0pl2NaOAn28CYw6uzeF7MfrXyYo_D5Y4vM_KA=s128-c0x00000000-cc-rp-mo-ba6"
          },
          "publishTime": "2023-08-29T23:46:08Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CuxHFxKEFogEtw-pA8393so5qwub8IDwFY0K7ywDYiOZ6s-Quvj5_Mmd0OgdlbPY81RvGEzdA3t1oKrF7vqQ-lJpAmF-7pjoeV-PlsQyi5IVoKcZnnDkP5g3md-5JaZqPmEugH1zTSWwZRoZZe1-x2nFsgR4hi1ZsFn",
          "widthPx": 1769,
          "heightPx": 1849,
          "authorAttributions": [
            {
              "displayName": "Marc",
              "uri": "//maps.google.com/maps/contrib/108940729276104051914",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocLiR2pLOtCmbQYRHmu53XN5KkLcutUOZGsvnvUL3AiYT2bYBENg=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CtCmdbWY32T_x7EYUD-J1DeOMQPH4Ay3Q-2HkQvv2QFeBUT-v2jBG70olJp2CQKyPKAOBChSMFrrCKM2x-FuSKCizBQ2sqj6OPB21siBFvuLhUHTtaPHVOnWu5sU_XPLbBXQ23zh8x_pOQ2XhNMtGvgIMtL6jcz9z8v",
          "widthPx": 3600,
          "heightPx": 4800,
          "authorAttributions": [
            {
              "displayName": "Service is Life / Work is Love Made Visible",
              "uri": "//maps.google.com/maps/contrib/118195643043460883286",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjUEciewwcYZ7Dmug8HnIWdZ5-PtoKLXiciCywDUJM7feCVYnmFzQw=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CuNpXq10oxWErwu6WI-MDRDX4UiMNdUBWGCR7E7-twC79KwT-MfR9UiGhWtSh90pBHv2adhh6kE91u6n696ofapggs-dcS7rqjIj4Ww1tUWrTDIgoUYOQU9s-Rq-tSNtS793k1_RCBEIbRGRHIeD2DtTF8d8oyOo_Y",
          "widthPx": 2119,
          "heightPx": 1192,
          "authorAttributions": [
            {
              "displayName": "Jimmy Brooklyn's Pizza Parlor",
              "uri": "//maps.google.com/maps/contrib/109505642950736996641",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWM9PbZL7tFXqDauGeGHzbjkSP23iPbdWx9JRh_waq6A7gIbSc=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CtVEt3YlsamqXEvDSRSc9NgVFZ8odNPaiXzmMeTyyolKyyxYbsUzRrx7PmcvVUmb5-cdGdWeeAFiqk0V7UJfS0g82z7nryjAlvZI95x9EOM2M0gVwfmCzozCPu9tfIBQ5dq0uRTQiJfO5i3-RZjXGbmcSIRW9NcYlgH",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Georgette “GG” George-Quinn",
              "uri": "//maps.google.com/maps/contrib/110548062283867757041",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXWfVyMkDfU25d5l0pl2NaOAn28CYw6uzeF7MfrXyYo_D5Y4vM_KA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CuYf_2tWBjDuGZwQggScgKZnUHTo2Hks0SXglzgEZMpg4x3NaAFVwQr9h8lg_HNxenf1fgr4CdLOKYYtC7xSeKqx-KV9j8NNZdVXP9iivaF-6uB7XTYJX-w7OgmhNtvjAFwx6drcPztgzAUdmS34GjA2n3ZXM9VJiW-",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Linda Brennan",
              "uri": "//maps.google.com/maps/contrib/116882475135672848500",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWqfDZNpZfvQgqRflGOyxXSzAxMBzH_Won9o7jZh8OPWyKUPtMZ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CtUmLV6urBbo3ChZSreUg_Zeq7bOJ9mvPRjBxPcFIsduvU3T_cRNvNCiW7g6Lf77gkuzjhArFMOnt2ciCXWwPyJIXED7n207pee5o8lDf8FX4HcLTkh0LEpjVTyAfSZHLZ2_jnRtQUtkWSJP1yJSO5Ht5MnlIh8fBUQ",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Jaime Vega junior",
              "uri": "//maps.google.com/maps/contrib/104565536489400317875",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVnGNLOYgV7kXiPeSR5PNhv4NPh7i0C87VjnApmf1TOJJ5SNUh4Hg=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CsGTINd4cT59_99iBFM1rhXbZ-z74KAhUeHLQTIXc31TQoR6kcOvoadL-QeWEVp7T3bEe_Bo_XCNcJm86sxHT-cOuJpBzf5Bkuj2xXK18TKMdm57u2zxlJ-IAo5sst35OVKIbJ-JSJauEejfNCPR2Bg0za95MmS6dk5",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Georgette “GG” George-Quinn",
              "uri": "//maps.google.com/maps/contrib/110548062283867757041",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXWfVyMkDfU25d5l0pl2NaOAn28CYw6uzeF7MfrXyYo_D5Y4vM_KA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CtAC9jRAstT-iUs6lkqfrnb00VnyUzjwhq0Ckprcq-JJztpOMz3NiSj2Wc3MNHHHIi28dH5teh4HNp21tbyKUXXzfPAkZ4JJrQbnLT8-ch4NEeckLc7UDFZRw1u3e2XdZdraPP5DxbjTh65Xdspqm9vHTzp1KRg5cqF",
          "widthPx": 4800,
          "heightPx": 3600,
          "authorAttributions": [
            {
              "displayName": "SgtMiracle",
              "uri": "//maps.google.com/maps/contrib/116887314721488207401",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXbI1DHtpFLM2loRElDXxq7aogbOGIcM3FaTTQOtSdVRqGgfX825A=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_Cv14eF8h4LRLcUFw4wVUCzLbpFO3d5kDYjT1-3v9DBr92zdBleKjlzH-fX_O2RbF87_GhuPlBOsSuvPhUHx-3qVeXe2w4ZuixnSSSP-tQTnTRMpfYIE4nLJqmIqqnUxDGGbPq8rh4G1DOjE2O-tyRjBlODKv9v8mEMm",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Georgette “GG” George-Quinn",
              "uri": "//maps.google.com/maps/contrib/110548062283867757041",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjXWfVyMkDfU25d5l0pl2NaOAn28CYw6uzeF7MfrXyYo_D5Y4vM_KA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_Cv-VijHzncPkHUAbf0ojKLy-OfKAtblyM79wrbFXGie2pqtD2XDiEkpFGqLcqwL9fY_i-FR7jonBLaSoMk_FNyqxzOABTX8qM7RyDJLgASc1B_iZkkQeSrX17CHnpKVHEx6HWDwqjIvDizH3YlqhBiUF_7wjD36Mu6Z",
          "widthPx": 2992,
          "heightPx": 2992,
          "authorAttributions": [
            {
              "displayName": "Christina Waters",
              "uri": "//maps.google.com/maps/contrib/103756618873093648264",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocJanX6YKDpDZBX_CYQZlVK9ulaliDjxJLMbk04lWY5vPq0ITw=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "outdoorSeating": true,
      "liveMusic": false,
      "menuForChildren": true,
      "servesCocktails": false,
      "servesDessert": true,
      "servesCoffee": false,
      "goodForChildren": true,
      "restroom": true,
      "goodForGroups": true,
      "paymentOptions": {
        "acceptsCreditCards": true,
        "acceptsDebitCards": true,
        "acceptsCashOnly": false
      },
      "parkingOptions": {
        "freeParkingLot": true,
        "freeStreetParking": true,
        "valetParking": false
      },
      "accessibilityOptions": {
        "wheelchairAccessibleParking": true,
        "wheelchairAccessibleEntrance": true,
        "wheelchairAccessibleRestroom": true,
        "wheelchairAccessibleSeating": true
      },
      "generativeSummary": {
        "overview": {
          "text": "Pizzeria offering New York-style pies and slices, plus calzones, pasta dishes and wings.",
          "languageCode": "en-US"
        }
      }
    }
  ],
  "contextualContents": [
    {
      "reviews": [
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSURod3JmRml3RRAB",
          "relativePublishTimeDescription": "a year ago",
          "rating": 5,
          "text": {
            "text": "Sicilian Oven is a great choice for those looking for delicious, gluten-free brick oven pizza. I was happy to see gluten fee displayed on the menu as opposed to asking if that was an option. The crust is crispy and flavorful, and the toppings are fresh and well-balanced. The restaurant has a cozy and welcoming atmosphere, and the service is friendly and attentive. In addition to pizza, the menu also features a variety of other Italian-inspired dishes, including salads, pasta, and sandwiches. Overall, if you're in the mood for authentic, gluten-free pizza, Sicilian Oven is definitely worth a visit.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Sicilian Oven is a great choice for those looking for delicious, gluten-free brick oven pizza. I was happy to see gluten fee displayed on the menu as opposed to asking if that was an option. The crust is crispy and flavorful, and the toppings are fresh and well-balanced. The restaurant has a cozy and welcoming atmosphere, and the service is friendly and attentive. In addition to pizza, the menu also features a variety of other Italian-inspired dishes, including salads, pasta, and sandwiches. Overall, if you're in the mood for authentic, gluten-free pizza, Sicilian Oven is definitely worth a visit.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Jim Cirone",
            "uri": "https://www.google.com/maps/contrib/108502107504615472519/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVv4Jtg4CGOkEq8umpUS6mXMQYjn3VY79GWeNm32rlaiUCmdvOT=s128-c-c0x00000000-cc-rp-mo-ba4-br100"
          },
          "publishTime": "2023-03-04T19:21:30Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSUN4c01PU29RRRAB",
          "relativePublishTimeDescription": "a year ago",
          "rating": 5,
          "text": {
            "text": "Delicious food, 5 Star amazing service, and trendy-earthy atmosphere! I have been looking forward to coming here for lunch since it opened and today was the day! My first visit did not disappoint!\nLove the inside -outside bar.. everything is spotless and the outside patio seating is completely covered with ceiling fans.. great atmosphere! The bar has TVs to enjoy your favorite sports and are not intrusive.\nI was greeted warmly by Dylan and decided to sit at the bar. So glad I did.. Nahatha is the bartender extraordinaire!!! Hospitality plus! Attentive, professional, knowledgeable and friendly! As a widow dining alone is always a challenge and I felt welcomed and comfortable! Thank you!\nThey offer happy hour Mon-Fri at lunch time! Great lunch options and everything comes with a huge salad! I chose the small Quattro fromage pizza and added caramelized onions and sausage. I also ordered the Riesling. $3.00 off a glass for happy hour.. yay!! I had 2!\nThe wine was delicious, crisp and cold and the salad came out quickly. It was huge and delicious and I set it aside to take home. Then the piece de resistance, my pizza was presented! A thing of beauty! Wow! Perfectly cooked, thin crispy crust and bubbly cheese! So much flavor absolutely delicious! Creamy cheese, sweet caramelized onions and yummy sausage. The small was actually bigger than expected. I ate half and took half home.\nThis will definitely be my new favorite day off lunch spot! So excited to work my way through the specialty pizzas! Everything exceeded my expectations! I highly recommend! See you next week!",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Delicious food, 5 Star amazing service, and trendy-earthy atmosphere! I have been looking forward to coming here for lunch since it opened and today was the day! My first visit did not disappoint!\nLove the inside -outside bar.. everything is spotless and the outside patio seating is completely covered with ceiling fans.. great atmosphere! The bar has TVs to enjoy your favorite sports and are not intrusive.\nI was greeted warmly by Dylan and decided to sit at the bar. So glad I did.. Nahatha is the bartender extraordinaire!!! Hospitality plus! Attentive, professional, knowledgeable and friendly! As a widow dining alone is always a challenge and I felt welcomed and comfortable! Thank you!\nThey offer happy hour Mon-Fri at lunch time! Great lunch options and everything comes with a huge salad! I chose the small Quattro fromage pizza and added caramelized onions and sausage. I also ordered the Riesling. $3.00 off a glass for happy hour.. yay!! I had 2!\nThe wine was delicious, crisp and cold and the salad came out quickly. It was huge and delicious and I set it aside to take home. Then the piece de resistance, my pizza was presented! A thing of beauty! Wow! Perfectly cooked, thin crispy crust and bubbly cheese! So much flavor absolutely delicious! Creamy cheese, sweet caramelized onions and yummy sausage. The small was actually bigger than expected. I ate half and took half home.\nThis will definitely be my new favorite day off lunch spot! So excited to work my way through the specialty pizzas! Everything exceeded my expectations! I highly recommend! See you next week!",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Georgette “GG” George-Quinn",
            "uri": "https://www.google.com/maps/contrib/110548062283867757041/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXWfVyMkDfU25d5l0pl2NaOAn28CYw6uzeF7MfrXyYo_D5Y4vM_KA=s128-c-c0x00000000-cc-rp-mo-ba6-br100"
          },
          "publishTime": "2023-05-09T00:45:39Z"
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChdDSUhNMG9nS0VJQ0FnSUNScFB5Qmx3RRAB",
          "relativePublishTimeDescription": "a year ago",
          "rating": 5,
          "text": {
            "text": "If you're looking for an authentic Italian pizza experience, look no further than Sicilian Oven. I recently ordered their classic cheese pizza for takeout not once, but twice, and both times I was blown away by the quality of the crust.\nThe crust was crispy on the outside and chewy on the inside, with just the right amount of char from the wood-fired oven. The tomato sauce was rich and flavorful, and the fresh mozzarella cheese melted perfectly on top.\nOverall, I highly recommend this restaurant for anyone looking for a truly authentic Italian pizza experience. Their cheese pizza is a must-try, and I can't wait to go back and sample some of their other offerings.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "If you're looking for an authentic Italian pizza experience, look no further than Sicilian Oven. I recently ordered their classic cheese pizza for takeout not once, but twice, and both times I was blown away by the quality of the crust.\nThe crust was crispy on the outside and chewy on the inside, with just the right amount of char from the wood-fired oven. The tomato sauce was rich and flavorful, and the fresh mozzarella cheese melted perfectly on top.\nOverall, I highly recommend this restaurant for anyone looking for a truly authentic Italian pizza experience. Their cheese pizza is a must-try, and I can't wait to go back and sample some of their other offerings.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Graziella Barosa",
            "uri": "https://www.google.com/maps/contrib/100692600647341858101/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUGyJL-X4HVqyUZKN-OyuMTQTXUfHA4QHC7JE8GMFYbNpreXdV1=s128-c-c0x00000000-cc-rp-mo-ba2-br100"
          },
          "publishTime": "2023-03-25T15:03:14Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CsZQEjxKic2Mld5qoYDKUB7lvNHztYzk9mg3K0nmI95RzEeLpFAKo07DWG7OrmOG3mkTfJVnKwtCHEL2QImELNsHEu3os2kSS6wTssdRMbUQN9YP48fXt6YNb5_LQQNFwb4CC3GXNpbA04Irb1Qd9E9ryhualH-y_ho",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_Cuqxxt7fj0-pzllsZYzKIKqLm1CMnjovLx6W0MQXPH2SU7SOLhsjW6rUBcdtymehjZDkMfVeC3w_67iDMROBx-vBVraMYGVtpMrx7LO9B3KCWrIeETf_jPvDeQCkjOI7ZYONCEEXDd63TfdOCJer_1ExlwilCW_W9Ip",
          "widthPx": 1920,
          "heightPx": 1080,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/107194505537760921696",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocITOEpJf7HEfuxlMYaiE_qeDM9LY2YcOFdm4LIWwcyLLvhwFQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_CsIKrEp9ix05pzjNa9qSpY87j4W8fTngnjkvirJUEGdFaIAuN4oNLVe8eaA8-DwYQMxQPxcuPP5q7dw106KQwutQ4P50e9ozT2hbU0px_tVERejCc111OWRjYWIDWAMBBaWAz3fnFJbClhIh7c1z0OrGWWcntKNtuKJ",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_Cs5NUhXTX8DatoSnv_NPAslheB8AMlO1vN7nHcQolVbAyL8fEPSKB4YQwvR7tCVkr9w5w3JPi4Fo6fmnyacJX8u0d8gobIkkFw9dl-oEhKOGkRGPfDhPve0AEcMumsAkNhDewc8l8hPaX1Xxqyl9JK1tY6tCvpoYsCD",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "James Cirone",
              "uri": "//maps.google.com/maps/contrib/108502107504615472519",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjVv4Jtg4CGOkEq8umpUS6mXMQYjn3VY79GWeNm32rlaiUCmdvOT=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/photos/AelY_Cuqhg3SdVNobVAgMXG99Ybwjfy4XY8xXYPDw40pXqv7Y4hIONfn06wN-4ANI6hCDRPJvO3MHwHejRRz9ilopA7cgzyyFeGJbhLARpCsYOa6-k7rdtjNAE6K3DIH61rw3pla-o8ptLsMjWcYVQ95k4cf5VfOC6KVTFrx",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Lucia Di",
              "uri": "//maps.google.com/maps/contrib/117679829816239570467",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWjL8F8VfpNWW48DCN1pTY8GeNTK7zLbUFTjdk2BckOOBxFnMqUCA=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "justifications": [
        {
          "businessAvailabilityAttributesJustification": {
            "delivery": true,
            "dineIn": true
          }
        },
        {
          "reviewJustification": {
            "highlightedText": {
              "text": "\"(We ordered Monalisa pizza)\""
            },
            "review": {
              "name": "places/ChIJb_SRfaQv2YgRM0A_8egAZvM/reviews/ChZDSUhNMG9nS0VJQ0FnSUQxOC1EQVJREAE",
              "relativePublishTimeDescription": "7 months ago",
              "rating": 5,
              "text": {
                "text": "BEST PIZZA IN FLORIDA! We are from Connecticut and we all know it’s very difficult to find a good pizza around here. We found it. Crust is perfection, ingredients are very fresh and super tasty. We’ll be back soon! (We ordered Monalisa pizza)",
                "languageCode": "en"
              },
              "originalText": {
                "text": "BEST PIZZA IN FLORIDA! We are from Connecticut and we all know it’s very difficult to find a good pizza around here. We found it. Crust is perfection, ingredients are very fresh and super tasty. We’ll be back soon! (We ordered Monalisa pizza)",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Gabriela Deabreu",
                "uri": "https://www.google.com/maps/contrib/104756174505702763701/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjVtoLp15rKP-BxDnVRlxfSCZXJLMUAzFWNNygqfrdUeGu5C_WB76w=s128-c0x00000000-cc-rp-mo-ba3"
              },
              "publishTime": "2024-01-10T03:19:03Z"
            }
          }
        }
      ]
    },
    {
      "reviews": [
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChdDSUhNMG9nS0VJQ0FnSUQyLThlMjZBRRAB",
          "relativePublishTimeDescription": "2 years ago",
          "rating": 5,
          "text": {
            "text": "Basilico’s has the best pizza around! The crust is on the thinner side and each slice has more than enough cheese, with is exactly the way I like it. It’s also a good price and eating in the restaurant, when not busy, is a nice place to go with family and friends, although I usually get take out.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Basilico’s has the best pizza around! The crust is on the thinner side and each slice has more than enough cheese, with is exactly the way I like it. It’s also a good price and eating in the restaurant, when not busy, is a nice place to go with family and friends, although I usually get take out.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "JZ DG3",
            "uri": "https://www.google.com/maps/contrib/102437996528353129953/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUq7gBJqxqCuo3jr8M4ys26p5Fhm4Ip32C_rda11GSmhjaFhnnx=s128-c-c0x00000000-cc-rp-mo-ba4-br100"
          },
          "publishTime": "2022-05-26T14:35:49Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChZDSUhNMG9nS0VJQ0FnSUM2M3JmLVRBEAE",
          "relativePublishTimeDescription": "2 years ago",
          "rating": 4,
          "text": {
            "text": "Best pizza I've found within 10-15 miles of Wellington. Not up to NYC or Boston standards, pretty",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Best pizza I've found within 10-15 miles of Wellington. Not up to NYC or Boston standards, pretty",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Don Haumann",
            "uri": "https://www.google.com/maps/contrib/118297146633849457927/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJzMUsI0eZpXQzE6TLIOZsOj0QbtwtqHjN-nWJ3Y8CLnTHE8w=s128-c-c0x00000000-cc-rp-mo-br100"
          },
          "publishTime": "2021-09-05T14:01:17Z"
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChdDSUhNMG9nS0VJQ0FnSURxMlBDOXFBRRAB",
          "relativePublishTimeDescription": "3 years ago",
          "rating": 5,
          "text": {
            "text": "Best pizza in Wellington, not even a close second that I can think of. Only critique (if I'm being highly critical), is that I always have to ask them to cook it well done because if I don't, it can be a little \"floppy\".",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Best pizza in Wellington, not even a close second that I can think of. Only critique (if I'm being highly critical), is that I always have to ask them to cook it well done because if I don't, it can be a little \"floppy\".",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Greg Wentz",
            "uri": "https://www.google.com/maps/contrib/101662518022683462992/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjWFlTS_cmWlZ_40dpEog9wvVtJGOb49haFfSEE_rq4rSrvRMxuO=s128-c-c0x00000000-cc-rp-mo-ba3-br100"
          },
          "publishTime": "2021-06-27T21:46:16Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Ct5WCAe209o0CQXv427eRRRujf4c4rnSDmVptkdJVgoBkv7t35mIxJCxhsUBpnnSognLK1JWxDZVwNh1UZfR-hC4WUxwp5SChwkI-3WS3oaiws1lkTdqHYPrxSxEOuRInnZmKO9PHS0NSOAYp35-099tL1EabTu7YxK",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/112078861972667474695",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocJO1odUYdotP5aqRg3fZKCw0sY-OZ4VJxYSDPpxMbk-lqZhvQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Cs8kZNWupOmG5iv_7l6QwTShe2b__a72FJqS4fR-l7Jia1hW3bbmWiSiTb80BqVB6yGuuki6t1wMsL2xqQY-rD-muu3czhX2wGCIk37kflssZaywxJh9uxEwmveLg5LvrNKx4K_Ct5im7b_fBl-g2QHPvf51cXELBHF",
          "widthPx": 1399,
          "heightPx": 933,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CuAeDnNrH82Ie8zcbuVevphU6MtNJM0MXnjddMHRKnAJpanAfI9QXFiCidKgS2dfqqL-KnvxfhlKZKVh-GSdH7SQBRkZkk8lvhJP1gUQmSoBZrwIFZxsnAiskduyH8Klib76CzAAKvKodbkzQqTr3JIz_tC3kUQY2bA",
          "widthPx": 1399,
          "heightPx": 933,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_CvSYK9BpAj1e_EFfLrbMmg970UXNAkdLnjHTsKx-UcdV4By0vhNbg5QduI4V5b2DDIJJrhAkpam2DB25BW1XG_hXSmxiZK5TBQGU7Kba4hEKjD-oJc8Z6lqsKz9voCo_YXY1WIQoFW29QXDET1fZS59UJreEis_nPcS",
          "widthPx": 1399,
          "heightPx": 933,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/photos/AelY_Cu9gNMrqyog73HGxxFyxVRnj31sfl-EX0Kq2IQVG27139CXcXqoIMXeVI3iZtesZsMhlJHGbwhwIzzl7_nUBJZUIZVaBnb2gYl_U6e0SvcPoc3ifVOid26z-7JBTToRqdpgbLQxAMOxMOyF6cWbSaELhzA91rpaPMZG",
          "widthPx": 4800,
          "heightPx": 3200,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/111260755251845666273",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWEImyswsLq79jvbd6-Bj5-M4eP95wtjp1A7yaO_XQumNFszVk=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "justifications": [
        {
          "businessAvailabilityAttributesJustification": {
            "dineIn": true
          }
        },
        {
          "reviewJustification": {
            "highlightedText": {
              "text": "\"Good Pizza here, good dough and ingredients\""
            },
            "review": {
              "name": "places/ChIJJxzhxlYv2YgRTHCfXdcwAuE/reviews/ChdDSUhNMG9nS0VJQ0FnSUNOaTlLUGxRRRAB",
              "relativePublishTimeDescription": "7 months ago",
              "rating": 4,
              "text": {
                "text": "Good Pizza here, good dough and ingredients",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Good Pizza here, good dough and ingredients",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Ricky Studds",
                "uri": "https://www.google.com/maps/contrib/113172514652358310032/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjXO2Yc4POkh9UfvHLw1v88Qo7y8FCIFVcuTwOaFSSIcmmEgSJSu_Q=s128-c0x00000000-cc-rp-mo-ba6"
              },
              "publishTime": "2024-01-17T20:11:24Z"
            }
          }
        }
      ]
    },
    {
      "reviews": [
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSUNGcXY2UWFREAE",
          "relativePublishTimeDescription": "10 months ago",
          "rating": 5,
          "text": {
            "text": "This place is kind of a hole in the wall but the pizza is incredible , great dough with a slightly sweet sauce. My wife love the garlic knots but My go to is the Stromboli absolutely delicious bet you can’t eat the whole thing!!! A Must try if your in the area.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "This place is kind of a hole in the wall but the pizza is incredible , great dough with a slightly sweet sauce. My wife love the garlic knots but My go to is the Stromboli absolutely delicious bet you can’t eat the whole thing!!! A Must try if your in the area.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Ray Braynen",
            "uri": "https://www.google.com/maps/contrib/102619562953594242989/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjUO5tQLDcIYFwTMrxCvDXq8L0HQ1cxTnPDq9SmTdxu0qjuBVfo=s128-c-c0x00000000-cc-rp-mo-ba2-br100"
          },
          "publishTime": "2023-10-27T22:15:16Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CuE4IuGg8DPtfVY3kbPCk4TqsQpPTH_zZPw8bw2bZkXUGVlofeuq0xUmdULStOaUKjp7cl7t6kPcQ1BBs5J8QZR1UL42WC2v_QgV2bsGcfluJmOWx0sGxgIoItkvmeLUIbogWfKQk1JOTWU6a1YhRvggFUgASYrO_qqoU4wzO0kdC44AT4QZLEhwCmI4bJdifMb2_A0yLoA5oAOJQUflPIE0uRppLSlo-E",
          "widthPx": 1252,
          "heightPx": 836,
          "authorAttributions": [
            {
              "displayName": "Slice"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CtBRcAq5v6w89n9SSPS8xsmhLlzzXAYOYlvMZ_KsrSsg_tuV5s86U89eeOn_82T1NAezQ38iVbOuxqL3xpFNcZK3O70rxyRKsLEqFlyGPRJy2E48HOODpdkhn1YFHV-dy--xecB1UvizMDA5OgipBygRdLi_lvQiovy",
          "widthPx": 1920,
          "heightPx": 1080,
          "authorAttributions": [
            {
              "displayName": "Greg Wentz",
              "uri": "//maps.google.com/maps/contrib/101662518022683462992",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWFlTS_cmWlZ_40dpEog9wvVtJGOb49haFfSEE_rq4rSrvRMxuO=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_Cto1lh9JEy5uSSqdOGBvFDZmIejgkslqKpdb3Wjq2VPpmBf_IEI08EtZ6ThtyONMdjCsytdCMmRcnSJTghu-LXYe8T8A0XCg2_M6KOtEcxiEk0FZOWVjTSwHzbGOpWcWUNNJ_Cyf1WRlZ9jyWVbsbWQTOy-3WGFgqx4",
          "widthPx": 1600,
          "heightPx": 1200,
          "authorAttributions": [
            {
              "displayName": "Greg Wentz",
              "uri": "//maps.google.com/maps/contrib/101662518022683462992",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWFlTS_cmWlZ_40dpEog9wvVtJGOb49haFfSEE_rq4rSrvRMxuO=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CtCaKEK7BhT6OiigeNWXyi_r3MmMyYpg9lu0ajGlYviQOociEdj1EEoJQbMNO068iySi-s3-8EtVI4KHLoc4pU0xb97N8Xc1MBVrCB7Jr3C2GMjGLILuoZiZC4qMKGHBwQS0y3i77R6YqVUP4XUWZ1tsrzAy2izWqWqQgJlr2aa8iJNuSzUTlKFjpXszN0uCGu_aETtL65uJFsc9cx_Q5Ym_KYbCyLkovI",
          "widthPx": 1292,
          "heightPx": 832,
          "authorAttributions": [
            {
              "displayName": "Slice"
            }
          ]
        },
        {
          "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/photos/AelY_CsWBEHpPEk6_wPOT0PwhCQP6xa9fp_I6dqwQmm-U24ELvVuQMELNrGvO3Fyxbm2TapsQvusw2sWwt9yQHQBGRM6Ne1bcAJECcYlFbq3w0F2TsaQX3N1zkdZBnDYfDQ8RNvE281jByknfRm-XVDLMyrqKm4Ym6vsaL6bVtBxBtmvg4NaRPDB9IkZqo1wgqCuSXbjDnIrD-z6lyW5af-e5VE3AEL6fjcPaoo",
          "widthPx": 1000,
          "heightPx": 979,
          "authorAttributions": [
            {
              "displayName": "Slice"
            }
          ]
        }
      ],
      "justifications": [
        {
          "businessAvailabilityAttributesJustification": {
            "dineIn": true
          }
        },
        {
          "reviewJustification": {
            "highlightedText": {
              "text": "\"Mid level pizza, never consistent\""
            },
            "review": {
              "name": "places/ChIJS1Gox4Av2YgRpvAUEieEUq4/reviews/ChZDSUhNMG9nS0VJQ0FnSUQ5a2Ezc1N3EAE",
              "relativePublishTimeDescription": "5 months ago",
              "rating": 3,
              "text": {
                "text": "Mid level pizza, never consistent",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Mid level pizza, never consistent",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "J R",
                "uri": "https://www.google.com/maps/contrib/102367646079561172128/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjV7x9icVXBk-Fycdgbivw9Y0IEyXqBzu_6Ncf5QCwDWU9Dmfnht=s128-c0x00000000-cc-rp-mo-ba5"
              },
              "publishTime": "2024-03-17T20:18:22Z"
            }
          }
        }
      ]
    },
    {
      "reviews": [
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSUM5dE9LYmx3RRAB",
          "relativePublishTimeDescription": "5 months ago",
          "rating": 4,
          "text": {
            "text": "Pizza was very tasty but would prefer an XL pie size. Crust was cooked well but a bit on the thin side for this for NYer! Priced well and cheaper than many on the area and curbside delivery is always welcome.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Pizza was very tasty but would prefer an XL pie size. Crust was cooked well but a bit on the thin side for this for NYer! Priced well and cheaper than many on the area and curbside delivery is always welcome.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "BatMedic",
            "uri": "https://www.google.com/maps/contrib/115896268928587530455/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a-/ALV-UjV38H_MWFNVhg5722I7fHHqg8x5AxdoJ6pLDqvvUNFoFHWHW3I=s128-c-c0x00000000-cc-rp-mo-ba4-br100"
          },
          "publishTime": "2024-03-03T01:52:44Z"
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChZDSUhNMG9nS0VJQ0FnSUNocjVYdUFREAE",
          "relativePublishTimeDescription": "a year ago",
          "rating": 3,
          "text": {
            "text": "Our first time. The pizza was tasty and the toppings were very good but the pies were undercooked. The garlic rolls were not very good. The Riceballs were fantastic and delicious. The calzone was amazing, brought me back to my younger days in NY. Overall it was disappointingly average. I will absolutely go back for the Calzone and Riceballs. Next time I will try the Meatball Parmesan Hero.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "Our first time. The pizza was tasty and the toppings were very good but the pies were undercooked. The garlic rolls were not very good. The Riceballs were fantastic and delicious. The calzone was amazing, brought me back to my younger days in NY. Overall it was disappointingly average. I will absolutely go back for the Calzone and Riceballs. Next time I will try the Meatball Parmesan Hero.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Rick Villano",
            "uri": "https://www.google.com/maps/contrib/101494680644564245548/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocJb-DwcUjMVS4H1HLEwduJLvFy9MQM_4zAk1cBWvwWpBq79EA=s128-c-c0x00000000-cc-rp-mo-br100"
          },
          "publishTime": "2023-02-25T12:39:05Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CvkMfcC83x6ZDR6S0U0IR1caSNRwikWxukYqMhxIt7-glaD01W5Cg-Qn-Cxr26CBYbuYiWas0gWi3NjgUlLH2sEw3Jf8TBCmnKUsjgneSzNbvGzO68duiyKjVCAYQXd5ahV_jj29FDqd37kK89szSzb9tPDxLZy5OgR",
          "widthPx": 3455,
          "heightPx": 2659,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_Cs7sTRGTqeH4a93fxnrVVoFu2vfVYLnuBrTsp1SLt0RjmqdEzoyfD5Zr9r7DW7UscJNkFWGWNiphPUj2pPsz8PqUFlNBKBhkfCCf5zNrhle9PoSiAU0X1qOir7b-ZTxAhxDEg6XIu3qFM-9nrTMbPTLO7JzdR06lzll",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CuZGWLcCCoPeSeONCpx71R43DmmoxrUcS8GG3YxmG27LARiV1itA0_puWXYA8iBRSUel9irQ4mQGrHz7aKtyrDm-o1qZHgART6P5dZE8WYcInbSWf6xswJwuCiaQM2-0bW2M29wXkmJrEEAjRRAIodhHgd_6X-BFoHi",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CvZ-9zanhUKUbBZEw-_Nsyn8SdbbPhE5LxviY5RR_FsegCgj1yg8AtGEqEyff0whmteu-hOV0_VGOEY84ADte4JTcXmJBJER9JF1j32Vl6Sl8qFo1c15Y0u5Yb5X5P18QsN-82JOTCOPpqSdC86brLjVW0-OLKU4Eug",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "Ryan Poholsky",
              "uri": "//maps.google.com/maps/contrib/113999477328755922916",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocKKx41yc6uj8CaF6U9XDlnfZbnDs74W7iWO6mt4bzyHGwqFHQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/photos/AelY_CtMhlvalGqMC9z66Re-XBui6E6YFxJGse9PVakaYAXuNlCuE3WMhYRkIKV3raV95ky9TL80uLS7NC2MYuGbVBcVV66iIT3zAY3QigGappBgA5lZDKx185HpPEMuWJYBE4Itl2vAEh5ZPVOp37ZfM86GBZT5Rz_U1tNL",
          "widthPx": 3024,
          "heightPx": 4032,
          "authorAttributions": [
            {
              "displayName": "A Google User",
              "uri": "//maps.google.com/maps/contrib/116169111356764961644",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjWiMnjhF5hHeq-nr_xr3lDZei-PlmOQDyJYt4FuWTuPYRz1Yms=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "justifications": [
        {
          "businessAvailabilityAttributesJustification": {
            "dineIn": true
          }
        },
        {
          "reviewJustification": {
            "highlightedText": {
              "text": "\"Some of the best pizza in the area.\""
            },
            "review": {
              "name": "places/ChIJ-0QaIEAv2YgRaUN8Kf2tERs/reviews/ChdDSUhNMG9nS0VJQ0FnSUR4dDYyTjFnRRAB",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "Some of the best pizza in the area. Thin and crispy",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Some of the best pizza in the area. Thin and crispy",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "Morgan Huebner",
                "uri": "https://www.google.com/maps/contrib/118095960510368157964/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocIil_noPxQxpN1sHH0aeSMZaHbeUTO6LYtl8mIrciO0gQjatA=s128-c0x00000000-cc-rp-mo"
              },
              "publishTime": "2023-06-16T22:05:21Z"
            }
          }
        }
      ]
    },
    {
      "reviews": [
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChZDSUhNMG9nS0VJQ0FnSUNobXRQVmZBEAE",
          "relativePublishTimeDescription": "a year ago",
          "rating": 5,
          "text": {
            "text": "I am born and raised in Brooklyn. I’ve heard it said that pizza was invented in Italy and perfected in Brooklyn. Well, for me, each slice of Jimmy Brooklyn’s pizza is like a little taste of home.",
            "languageCode": "en"
          },
          "originalText": {
            "text": "I am born and raised in Brooklyn. I’ve heard it said that pizza was invented in Italy and perfected in Brooklyn. Well, for me, each slice of Jimmy Brooklyn’s pizza is like a little taste of home.",
            "languageCode": "en"
          },
          "authorAttribution": {
            "displayName": "Mike McClarnon",
            "uri": "https://www.google.com/maps/contrib/101130466098923340112/reviews",
            "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocKXj-YFmpcrOMhr8y2JcY07mnA0uyjlZqEQzjZnb7GYktwZAQ=s128-c-c0x00000000-cc-rp-mo-br100"
          },
          "publishTime": "2023-02-10T17:32:41Z"
        }
      ],
      "photos": [
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CujeHjZAse9Gq4bX673DIY09c0EgAPmfuPrJtVIz1vEVa5gl03zUy1yE1cjoWa1KPE9T14TuMhmG_4NuFJl2gBIedhi4QNnzuQ5zz-6RkYA35-SeYBajg7Mz-EkGF4jbZyuuraMhQ9bjXfePjsqcC1nLdvZHMc5Nj5d",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Federico Chacon-Trastulli",
              "uri": "//maps.google.com/maps/contrib/112916215262050113771",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocJ5NXXua-Wy9HHwlZDykYqKiozap8ZQWE8WROYCJAwSMh1gvQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CvNcPjQOFbsL2TlDhZ2iNbVy_BjpM1U86tT9_a_C8nVwAv8-5eR4a_s3ZGW6-mm9R_j5k7X4opVCcx3C89Xn3AgC8NYaH_j7ohdb89jiKSrkNy90nQgrINvJ789QyDxwUH4dZM0VULsLXR9WzTM_t0pK7PMc6OdvQKE",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Eduardo Tineo",
              "uri": "//maps.google.com/maps/contrib/108968910810853424603",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjULY2_MmKp-zjGs9pS9BgWM_6f3Xgg_3W54-Rg8htZ6i--iWLZ7=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_Ctf99Ac8fDG8j5i1E2ngT0Ca72dL5YC_Tce4fu_Q0_8yI4h6IRYHAInR1H_YtSrHYdKKbW4jaW-CDCK1ALEWfmBh_ju8qf-KvO1PgY50-C0V4DUBLkLjNGuxAOWuwyimE-0FHdtYlLRPf9ACppeY1EC4DafecrIBway",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Federico Chacon-Trastulli",
              "uri": "//maps.google.com/maps/contrib/112916215262050113771",
              "photoUri": "//lh3.googleusercontent.com/a/ACg8ocJ5NXXua-Wy9HHwlZDykYqKiozap8ZQWE8WROYCJAwSMh1gvQ=s100-p-k-no-mo"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_Ctbk7GkOI4PbeDXkKdnl61hQY-45fJ2-o_adwgugWnn7P8fFuNn8dvC2ztBgsxhxMq05sgzIXQLoTXdVK1KeznxC0VbIMieNbs6k3PzE0xjaJsdEnqXboM6bFj0y1zZORs3-PyXEVDSMU1QakHO6TYysEaxgDBkbgztXppG-O6tSpqHqx_X0evCL2f5pDyzix-L-JLT1sf3__Wfxm0VdsCLBtLoeENFl8M",
          "widthPx": 1195,
          "heightPx": 672,
          "authorAttributions": [
            {
              "displayName": "Storefront by DoorDash"
            }
          ]
        },
        {
          "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/photos/AelY_CubHVAGBcjHVw98hLa16NNKudOTXdOM-9eSG0u64HrxnMOkk3uBfF9wwOfDaPDl5WOzH_KGLTCbeMGoe-e-xNgsAUkdBEarO3Rv4qhekLphyg5lPzvUx9e93hzTileXpZxzAoN4LqKCHEsVp2dwAlzm7ZTJ__m9kpi1",
          "widthPx": 4032,
          "heightPx": 3024,
          "authorAttributions": [
            {
              "displayName": "Eduardo Tineo",
              "uri": "//maps.google.com/maps/contrib/108968910810853424603",
              "photoUri": "//lh3.googleusercontent.com/a-/ALV-UjULY2_MmKp-zjGs9pS9BgWM_6f3Xgg_3W54-Rg8htZ6i--iWLZ7=s100-p-k-no-mo"
            }
          ]
        }
      ],
      "justifications": [
        {
          "businessAvailabilityAttributesJustification": {
            "takeout": true,
            "dineIn": true
          }
        },
        {
          "reviewJustification": {
            "highlightedText": {
              "text": "\"Delicious pizza from fresh ingredients.\""
            },
            "review": {
              "name": "places/ChIJAceb3fMl2YgRGrBuYyo3_mc/reviews/ChZDSUhNMG9nS0VJQ0FnSURoX1lic1RBEAE",
              "relativePublishTimeDescription": "a year ago",
              "rating": 5,
              "text": {
                "text": "Delicious pizza from fresh ingredients. Friendly staff!",
                "languageCode": "en"
              },
              "originalText": {
                "text": "Delicious pizza from fresh ingredients. Friendly staff!",
                "languageCode": "en"
              },
              "authorAttribution": {
                "displayName": "john serban",
                "uri": "https://www.google.com/maps/contrib/111466350424232849087/reviews",
                "photoUri": "https://lh3.googleusercontent.com/a/ACg8ocIKQUl_d4qZaADvVoIxe5-kzW5ppmMbrBzeYwu4eCFkh_m-yQ=s128-c0x00000000-cc-rp-mo-ba4"
              },
              "publishTime": "2023-03-15T23:25:27Z"
            }
          }
        }
      ]
    }
  ],
  "nextPageToken": "AelY_CuMbW5SYa4ZnRmEYjKUb-c1qJcMNaqDW2r0iRYzX09bB_6gDTPPJewdIbRX7Ag8CGLtkoES-F8cQ4mtAgvI8CKdhm5xGwe_8xZvq4i00pz_5dEvWW4zQK0N1jCI-8hFnSBd-LbZ9c204fy7b_D6XLFDqR_weeoHrY4QjHTlXiLbdrgQshQT6MqdhvJsD7oMaWMRGNXa0kJMEiTY_XOjSTNII4gNz49kXuYwVvn3lAu3ORzltEks705PPmNV7KjHrRvoMGXQ"
}
","status":200,"url":"https://places.googleapis.com/v1/places:searchText"},"revalidate":31536000,"tags":[]}